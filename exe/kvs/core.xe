
  KVS := new

  (record kv: Type     := (put:      Record)
                          (delete:   Table → Key)
                          (get:      Table → Key)
                          (next_id:  Table → Key)
                          (index:    Table → Key → Value))

  (record kvs: Type    := (append:   Iterator)
                          (remove:   Iterator)
                          (fold:     Table → Key → Value))

  (record db: Type     := (start:    Sum ok error)
                          (stop:     Sum ok error)
                          (join:     Node))

  (record core: Type   :=

         (generation: Table → Key → () :=
                      (case LE (Minus Key (topleft Table Key)) (application.get_env kvs generation 250000) of
                          (true  -> ())
                          (false -> core.rotate Table)))

         (init: Backend → Module → () :=
                (lists.fold (\ (t,a: Type) →
                              Backend.create_table x.name [{attributes,t.fields},{t.copy_type,[node ()]}])
                           (lists.fold (\ (key: Type) → Backend.add_table_index t.name key) t.keys t)
                           (Module.metainfo()).tables() ))

         (containers: () → list :=
                (lists.flatten
                 lists.fold (\ (m: Type) →
                 lists.fold (\ (t: Type) → (case (x.container) of
                                                (true -> prod t.name t.fields ())
                                                (false -> [] ) ))))))

