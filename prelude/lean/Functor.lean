/- Functor -/

import Setoid
import Cat
import Mor

/-
 - The category of functors
 -/

namespace Functor
    -- axioms of functor
    section withOnHom
        variables (C D : CatType) (onOb : C ‚Üí D)
        variables (onHom : Œ†{X Y : C}, (X ‚áíC‚áí Y)‚•§(onOb X ‚áíD‚áí onOb Y))
        definition OnIdProp : Prop :=
            ‚àÄ{X : C}, (onHom ‚ë†) ‚â°(onOb X ‚áíD‚áí onOb X)‚â° ‚ë†
        definition OnIdInvProp : Prop :=
            ‚àÄ{X : C}, ‚ë† ‚â°(onOb X ‚áíD‚áí onOb X)‚â° (onHom ‚ë†)
        definition OnMulProp : Prop :=
            ‚àÄ{X Y Z : C}, ‚àÄ(g : Y ‚áíC‚áí Z), ‚àÄ(f : X ‚áíC‚áí Y),
                (onHom (g ‚äôC‚äô f)) ‚â°(onOb X ‚áíD‚áí onOb Z)‚â° ((onHom g) ‚äôD‚äô (onHom f))
        definition OnMulInvProp : Prop :=
            ‚àÄ{X Y Z : C}, ‚àÄ(g : Y ‚áíC‚áí Z), ‚àÄ(f : X ‚áíC‚áí Y),
                ((onHom g) ‚äôD‚äô (onHom f)) ‚â°(onOb X ‚áíD‚áí onOb Z)‚â° (onHom (g ‚äôC‚äô f))
    end withOnHom
end Functor

-- functor as an object of the category `Functor`
record FunctorType (C D : CatType) : Type :=
    (onOb : C ‚Üí D)
    (onHom : Œ†{X Y : C}, (X ‚áíC‚áí Y)‚•§(onOb X ‚áíD‚áí onOb Y))
    (onId : Functor.OnIdProp C D onOb @onHom)
    (onMul : Functor.OnMulProp C D onOb @onHom)
abbreviation Functor.MkOb {C D : CatType} := @FunctorType.mk C D

abbreviation FunctorType.onIdInv {C D : CatType} (F : FunctorType C D)
    : Functor.OnIdInvProp C D (@FunctorType.onOb _ _ F) (@FunctorType.onHom _ _ F) :=
    Œª X, SetoidType.Sym _ (@FunctorType.onId _ _ F X)

abbreviation FunctorType.onMulInv {C D : CatType} (F : FunctorType C D)
    : Functor.OnMulInvProp C D (@FunctorType.onOb _ _ F) (@FunctorType.onHom _ _ F) :=
    Œª X Y Z, Œª f g, SetoidType.Sym _ (@FunctorType.onMul _ _ F X Y Z f g)

-- action on carrier
attribute FunctorType.onOb [coercion]
infixl `$$`:100 := FunctorType.onOb
definition cat_hom.onHom {C D : CatType} (F : FunctorType C D)
    {X Y : C} (m : X ‚áíC‚áí Y) := (FunctorType.onHom F) $ m
attribute cat_hom.onHom [coercion]
infixl `$$/`:100 := cat_hom.onHom
definition cat_hom.onEqu {C D : CatType} (F : FunctorType C D)
    {X Y : C} {m1 m2 : X ‚áíC‚áí Y} (e : m1 ‚â°_‚â° m2) := (FunctorType.onHom F) $/ e
attribute cat_hom.onEqu [coercion]
infixl `$$//`:100 := cat_hom.onEqu
definition cat_hom.onSquare {C D : CatType} (F : FunctorType C D)
        {X11 X12 X21 X22 : C}
        {m1x : X11 ‚áíC‚áí X12} {m2x : X21 ‚áíC‚áí X22}
        {mx1 : X11 ‚áíC‚áí X21} {mx2 : X12 ‚áíC‚áí X22}
    (sq : Mor.SquareProp C m1x m2x mx1 mx2)
    : Mor.SquareProp D (F m1x) (F m2x) (F mx1) (F mx2) :=
    (FunctorType.onMulInv F mx2 m1x)
        ‚ä°((F X11) ‚áíD‚áí (F X22))‚ä°
            (F $$// sq)
        ‚ä°((F X11) ‚áíD‚áí (F X22))‚ä°
    (FunctorType.onMul F m2x mx1)
attribute cat_hom.onSquare [coercion]
infixl `$$///`:100 := cat_hom.onSquare

namespace Functor
    -- morphisms between functors are natural transformations
    record HomType {C D : CatType} (F G : FunctorType C D) : Type :=
        (onOb : Œ†(X : C), F X ‚áíD‚áí G X)
        (onHom : ‚àÄ{X Y : C}, ‚àÄ(m : X ‚áíC‚áí Y), Mor.SquareProp D (F m) (G m) (onOb X) (onOb Y))
    abbreviation MkHom {C D : CatType} {F G : FunctorType C D} := @HomType.mk C D F G
    abbreviation HomType.onHomInv {C D : CatType} {F G : FunctorType C D}
        (nat : HomType F G) {X Y : C} (m : X ‚áíC‚áí Y)
        := SetoidType.Sym (F X ‚áíD‚áí G Y) (HomType.onHom nat m)
end Functor

-- action
attribute Functor.HomType.onOb [coercion]
infixl `/$$`:100 := Functor.HomType.onOb
infixl `/$$/`:100 := Functor.HomType.onHom
infixl `/$/$/`:100 := Functor.HomType.onHomInv

namespace Functor
    -- setoid of natural transformations
    definition HomSet {C D : CatType} : Cat.HomType (FunctorType C D) :=
        Œª(F G : FunctorType C D), Setoid.MkOb
            /- El -/ (HomType F G)
            /- Equ -/ (Œª(f g : HomType F G), ‚àÄ X, f X ‚â°(F X ‚áíD‚áí G X)‚â° g X)
            /- Refl-/ (Œª f, Œª X, ‚äú)
            /- Trans -/ (Œª f g h, Œª fg gh, Œª X, (fg X) ‚ä°(F X ‚áíD‚áí G X)‚ä° (gh X))
            /- Sym -/ (Œª f g, Œª fg, Œª X, SetoidType.Sym (F X ‚áíD‚áí G X) (fg X))
end Functor

-- the dedicated arrow for morphisms of functors (nat.tr.)
infixr `‚üπ`:10 := Functor.HomSet

namespace Functor
  section withCD
    variables {C D : CatType}

    -- identity in functor category (identity natural transformation)
    definition Id : Cat.IdType (@Functor.HomSet C D) :=
      Œª(F : FunctorType C D), Functor.MkHom
        /- onOb -/ (Œª X, ‚ë†)
        /- onHom -/ (Œª X Y, Œª m, Mor.SquareId1 D (F m))

    -- multiplication in functor category (composition of natural transformations)
    definition Mul : Cat.MulType (@Functor.HomSet C D) :=
        Œª(F G H : FunctorType C D), Setoid.MkHom -- :[Hom G H ‚•§ Hom F G ‚•§ Hom F H]
            /- onEl -/ (Œª(a : G‚üπH), Setoid.MkHom -- :[Hom F G ‚•§ Hom F H]
                /- onEl -/ (Œª(b : F‚üπG), Functor.MkHom -- :[Hom F H]
                    /- onOb -/ (Œª(o : C), a o ‚äôD‚äô b o)
                    /- onHom -/ (Œª(o1 o2 : C), Œª(m12 : o1 ‚áíC‚áí o2),
                        Mor.SquareMul1 D (b /$$/ m12) (a /$$/ m12) ))
                /- onEqu -/ (Œª(b1 b2 : F‚üπG), Œª(b12 : b1 ‚â°(F‚üπG)‚â° b2),
                    Œª(o : C), ((CatType.Mul D) (a o)) $/ (b12 o) /- Equ in Hom F H -/ ))
            /- onEqu -/ (Œª(a1 a2 : G‚üπH), Œª(a12 : a1 ‚â°(G‚üπH)‚â° a2), Œª(b : F‚üπG),
                    Œª(o : C), ((CatType.Mul D) $/ (a12 o)) (b o) /-Equ in Hom F H -/ )

    definition UnitL : Cat.UnitLProp (@Id C D) (@Mul C D) :=
        Œª(A B : FunctorType C D), Œª(f : A‚üπB),
            Œª(o : C), CatType.UnitL D (f o)

    definition UnitR : Cat.UnitRProp (@Id C D) (@Mul C D) :=
        Œª(A B : FunctorType C D), Œª(f : A‚üπB),
            Œª(o : C), CatType.UnitR D (f o)

    definition Assoc : Cat.AssocProp (@Mul C D) :=
        Œª(F G H I: FunctorType C D), Œª(f : H‚üπI), Œª(g : G‚üπH), Œª(h : F‚üπG),
            Œª(o : C), CatType.Assoc D (f o) (g o) (h o)

  end withCD
end Functor

-- the category of functors (between categories C and D)
definition FunctorCat (C D : CatType) : CatType :=
    Cat.MkOb
        (FunctorType C D) (@Functor.HomSet C D)
        (@Functor.Id C D) (@Functor.Mul C D)
        (@Functor.UnitL C D) (@Functor.UnitR C D) (@Functor.Assoc C D)

-- the dedicated arrow for morphisms of categories (functors)
infixr `‚ü∂`:100 := FunctorCat

-- constant functor
namespace Cat
namespace Delta
  section withCD
    variables (C D : CatType)

    definition onOb  (d : D)
        : C ‚ü∂ D :=
        Functor.MkOb
            /- onOb -/ ( Œª(c : C), d)
            /- onHom -/ ( Œª(c1 c2 : C), Setoid.Const (c1 ‚áíC‚áí c2) (d ‚áíD‚áí d) ‚ë† )
            /- onId -/ ( Œª(c : C), ‚äú)
            /- onMul -/ ( Œª(c1 c2 c3 : C), Œª(g : c2 ‚áíC‚áí c3), Œª(f : c1 ‚áíC‚áí c2),
                CatType.UnitCInv D)

    definition onHom.onEl {d1 d2 : D} (f : d1 ‚áíD‚áí d2)
        : (onOb C D d1) ‚üπ (onOb C D d2) :=
        Functor.MkHom
            ( Œª(c : C), f)
            ( Œª(c1 c2 : C), Œª(c12 : c1 ‚áíC‚áí c2), Mor.SquareId2 D f)

    definition onHom.onEqu{d1 d2 : D} {f1 f2 : d1 ‚áíD‚áí d2} (e : f1 ‚â°(d1 ‚áíD‚áí d2)‚â° f2 )
        :   (onHom.onEl C D f1)
                ‚â°((onOb C D d1) ‚üπ (onOb C D d2))‚â°
            (onHom.onEl C D f2) :=
        Œª(c : C), e

    definition onHom {d1 d2 : D} : (d1 ‚áíD‚áí d2)‚•§(onOb C D d1 ‚üπ onOb C D d2) :=
        Setoid.MkHom (@onHom.onEl C D d1 d2) (@onHom.onEqu C D d1 d2)

    definition onId : Functor.OnIdProp D (C ‚ü∂ D) (@onOb C D) (@onHom C D) :=
        Œª (d : D), Œª (c : C), ‚äú

    definition onMul : Functor.OnMulProp D (C ‚ü∂ D) (@onOb C D) (@onHom C D) :=
        Œª(d1 d2 d3 : D), Œª(g : d2 ‚áíD‚áí d3), Œª(f : d1 ‚áíD‚áí d2), Œª (c : C), ‚äú

  end withCD
end Delta

    definition Delta (C D : CatType) : D ‚ü∂ (C ‚ü∂ D) :=
        Functor.MkOb
            (@Delta.onOb C D)
            (@Delta.onHom C D)
            (@Delta.onId C D)
            (@Delta.onMul C D)

end Cat

namespace Functor

    abbreviation ConeType {C D : CatType} (X : D) (F : C ‚ü∂ D) : Type
    := Œ†(Y : C), (X ‚áíD‚áí F Y)

    abbreviation CoconeType {C D : CatType} (F : C ‚ü∂ D) (X : D) : Type
    := Œ†(Y : C), (F Y ‚áíD‚áí X)

    abbreviation IsConeProp {C D : CatType} (X : D) (F : C ‚ü∂ D)
        (arrow : ConeType X F) : Prop
    := ‚àÄ{A B : C}, ‚àÄ(m : A ‚áíC‚áí B),
            (arrow B) ‚â°(X ‚áíD‚áí F B)‚â° ((F m) ‚äôD‚äô (arrow A))

    abbreviation IsCoconeProp {C D : CatType} (F : C ‚ü∂ D) (X : D)
        (arrow : CoconeType F X) : Prop
    := ‚àÄ{A B : C}, ‚àÄ(m : A ‚áíC‚áí B),
            ((arrow B) ‚äôD‚äô (F m)) ‚â°(F A ‚áíD‚áí X)‚â° (arrow A)

    definition FromCone {C D : CatType} {X : D} {F : C ‚ü∂ D}
        (arrow : ConeType X F)
        (cone : IsConeProp X F arrow)
        : (Cat.Delta C D X) ‚üπ F
    := MkHom
        /- onOb -/ arrow
        /- onHom -/ ( Œª(A B: C), Œª(m : A ‚áíC‚áí B),
            (CatType.UnitR D (arrow B))‚ä°(X ‚áíD‚áí F B)‚ä°(cone m))

    definition FromCocone {C D : CatType} {F : C ‚ü∂ D} {X : D}
        (arrow : CoconeType F X)
        (cocone : IsCoconeProp F X arrow)
        : F ‚üπ (Cat.Delta C D X)
    := MkHom
        /- onOb -/ arrow
        /- onHom -/ ( Œª(A B: C), Œª(m : A ‚áíC‚áí B),
            (cocone m)‚ä°(F A ‚áíD‚áí X)‚ä°(CatType.UnitLInv D (arrow A))
            )

end Functor

-- the identity functor (1 in Cat)
definition Cat.Id {C : CatType} : C ‚ü∂ C := Functor.MkOb
    /- onOb -/ ( Œª(X : C), X)
    /- onHom -/ ( Œª(X Y : C), Setoid.Id)
    /- onId -/ ( Œª(X : C), ‚äú)
    /- onMul -/ ( Œª(X Y Z : C), Œª(g : Y ‚áíC‚áí Z), Œª(f : X ‚áíC‚áí Y), ‚äú)

notation `ùüô` := Cat.Id

-- multiplication of functors
definition Cat.MulFF {C D E : CatType} (F : D ‚ü∂ E) (G : C ‚ü∂ D)
    : C ‚ü∂ E := Functor.MkOb
        /- onOb -/ ( Œª(X : C), (F (G X)))
        /- onHom -/ ( Œª(X Y : C),
            (@FunctorType.onHom D E F (G X) (G Y))
                ‚äôSetoidCat‚äô
            (@FunctorType.onHom C D G X Y))
        /- onId -/ ( Œª(X : C),
            (F (@FunctorType.onId C D G X))
                ‚ä°((F (G X)) ‚áíE‚áí (F (G X)))‚ä°
            (@FunctorType.onId D E F (G X)))
        /- onMul -/ ( Œª(X Y Z : C), Œª(g : Y ‚áíC‚áí Z), Œª(f : X ‚áíC‚áí Y),
            (F (@FunctorType.onMul C D G X Y Z g f))
                ‚ä°((F (G X)) ‚áíE‚áí (F (G Z)))‚ä°
            (@FunctorType.onMul D E F (G X) (G Y) (G Z) (G g) (G f)))

notation F `‚äó` G : 100 := Cat.MulFF F G

definition Cat.MulFN {C D E : CatType} (F : D ‚ü∂ E) {G1 G2 : C ‚ü∂ D} (g : G1 ‚üπ G2)
    : (F ‚äó G1) ‚üπ (F ‚äó G2) := Functor.MkHom
        /- onOb -/ ( Œª(X : C), (F $$/ (g /$$ X)))
        /- onHom -/ ( Œª(X Y : C), Œª(m : X ‚áíC‚áí Y), (F $$/// (g /$$/ m)) )

notation F `‚äó/` g : 100 := Cat.MulFN F g

definition Cat.MulNF {C D E : CatType} {F1 F2 : D ‚ü∂ E} (f : F1 ‚üπ F2) (G : C ‚ü∂ D)
    : (F1 ‚äó G) ‚üπ (F2 ‚äó G) := Functor.MkHom
        /- onOb -/ ( Œª(X : C), (f /$$ (G $$ X)))
        /- onHom -/ ( Œª(X Y : C), Œª(m : X ‚áíC‚áí Y), (f /$$/ (G $$/ m)) )

notation f `/‚äó` G : 100 := Cat.MulNF f G

definition Cat.Assoc {C1 C2 C3 C4 : CatType}
    (F34 : C3 ‚ü∂ C4) (F23 : C2 ‚ü∂ C3) (F12 : C1 ‚ü∂ C2)
    : ((F34 ‚äó F23) ‚äó F12) ‚üπ (F34 ‚äó (F23 ‚äó F12))
    := Functor.MkHom
        /- onOb -/ (Œª X, ‚ë†)
        /- onHom -/ (Œª X Y, Œª m, Mor.SquareId1 C4 (F34 $$/ (F23 $$/ (F12 $$/ m))))
definition Cat.AssocInv {C1 C2 C3 C4 : CatType}
    (F34 : C3 ‚ü∂ C4) (F23 : C2 ‚ü∂ C3) (F12 : C1 ‚ü∂ C2)
    : (F34 ‚äó (F23 ‚äó F12)) ‚üπ ((F34 ‚äó F23) ‚äó F12)
    := Functor.MkHom
        /- onOb -/ (Œª X, ‚ë†)
        /- onHom -/ (Œª X Y, Œª m, Mor.SquareId1 C4 (F34 $$/ (F23 $$/ (F12 $$/ m))))

definition Cat.UnitL {C1 C2 : CatType} (F : C1 ‚ü∂ C2) : (ùüô ‚äó F) ‚üπ F
    := Functor.MkHom ( Œª X, ‚ë†) (Œª X Y, Œª m, Mor.SquareId1 C2 (F $$/ m))
definition Cat.UnitLInv {C1 C2 : CatType} (F : C1 ‚ü∂ C2) : F ‚üπ (ùüô ‚äó F)
    := Functor.MkHom ( Œª X, ‚ë†) (Œª X Y, Œª m, Mor.SquareId1 C2 (F $$/ m))
definition Cat.UnitR {C1 C2 : CatType} (F : C1 ‚ü∂ C2) : (F ‚äó ùüô) ‚üπ F
    := Functor.MkHom ( Œª X, ‚ë†) (Œª X Y, Œª m, Mor.SquareId1 C2 (F $$/ m))
definition Cat.UnitRInv {C1 C2 : CatType} (F : C1 ‚ü∂ C2) : F ‚üπ (F ‚äó ùüô)
    := Functor.MkHom ( Œª X, ‚ë†) (Œª X Y, Œª m, Mor.SquareId1 C2 (F $$/ m))

abbreviation Cat.FullEqu {C D : CatType} {F G : C ‚ü∂ D} : EquType [F ‚üπ G]
    := SetoidType.Equ (F ‚üπ G)

infix `‚â£` : 10 := Cat.FullEqu

abbreviation Cat.Wiskering {C D : CatType} {F G H : C ‚ü∂ D}
    (b : G ‚üπ H) (a : F ‚üπ G) : (F ‚üπ H)
    := b ‚äô(C ‚ü∂ D)‚äô a

infixl `‚óã` : 100 := Cat.Wiskering

-- TODO: Cat.Mul, Cat,UnitorLR, Cat.Associator, Cat.TriangleLCREqu, Cat.PentagonEqu
