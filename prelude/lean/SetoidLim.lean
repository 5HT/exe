/- SetoidLim -/

import Setoid
import Mor
import Functor
import Adjunction

/-
 - Definition of LIMIT in SetoidCat
 -/

namespace Setoid
    record LimType {C : CatType} (F : C‚ü∂SetoidCat) : Type :=
        (atOb : Œ†(X : C), [F X])
        (atHom : ‚àÄ{X Y : C}, ‚àÄ(m : X ‚áíC‚áí Y), (atOb Y) ‚â°(F Y)‚â° ((F m) $ (atOb X)))
    abbreviation MkLim {C : CatType} {F : C‚ü∂SetoidCat} := @LimType.mk C F
end Setoid

-- action
attribute Setoid.LimType.atOb [coercion]
attribute Setoid.LimType.atHom [coercion]

namespace Setoid
    definition LimSet {C : CatType} (F : C‚ü∂SetoidCat) : SetoidType :=
        Setoid.MkOb
        (LimType F)
        ( Œª(a b : LimType F), ‚àÄ(X : C), (a X) ‚â°(F X)‚â° (b X))
        ( Œª(a : LimType F), Œª(X : C),
            @SetoidType.Refl (F X) (a X))
        ( Œª(a b c : LimType F), Œª ab bc, Œª(X : C),
            @SetoidType.Trans (F X) (a X) (b X) (c X) (ab X) (bc X))
        ( Œª(a b : LimType F), Œª ab, Œª(X : C),
            @SetoidType.Sym (F X) (a X) (b X) (ab X))

    definition LimMap.onElEl {C : CatType} {F G : C‚ü∂SetoidCat}
            : (F ‚üπ G) ‚Üí LimSet F ‚Üí LimSet G
    := Œª (nat : F ‚üπ G), Œª(a : LimType F), Setoid.MkLim
            /- atOb -/ ( Œª(X : C), (nat /$$ X) $ (a X))
            /- atHom -/ ( Œª(X Y : C), Œª(m : X ‚áíC‚áí Y),
                    ((nat /$$ Y) $/ (a m)) ‚ä°(G Y)‚ä° ((nat /$$/ m) /$ (a X)))

    definition LimMap.onElEqu {C : CatType} {F G : C‚ü∂SetoidCat}
            : ‚àÄ(nat : F ‚üπ G), ‚àÄ{a b : LimSet F}, (a ‚â°(LimSet F)‚â° b) ‚Üí
                ((LimMap.onElEl nat a) ‚â°(LimSet G)‚â° (LimMap.onElEl nat b))
    := Œª (nat : F ‚üπ G), Œª (a b : LimSet F), Œª (eq : a ‚â°(LimSet F)‚â° b),
            Œª (X : C), (nat /$$ X) $/ (eq X)

    definition LimMap.onEquEl {C : CatType} {F G : C‚ü∂SetoidCat}
            : ‚àÄ{nat nat' : F ‚üπ G}, ‚àÄ(eq : nat ‚â°(F ‚üπ G)‚â° nat'), ‚àÄ(a : LimSet F),
                ((LimMap.onElEl nat a) ‚â°(LimSet G)‚â° (LimMap.onElEl nat' a))
    := Œª (nat nat' : F ‚üπ G), Œª (eq : nat ‚â°(F ‚üπ G)‚â° nat'), Œª (a : LimSet F),
            Œª (X : C), (eq X) /$ (a X)

    definition LimMap {C : CatType} {F G : C‚ü∂SetoidCat}
        : (F ‚üπ G) ‚•§ (LimSet F ‚•§ LimSet G)
    := Setoid.MkHom2 (F ‚üπ G) (LimSet F) (LimSet G)
            LimMap.onElEl (@LimMap.onElEqu C F G) (@LimMap.onEquEl C F G)

    definition LimOnId {C : CatType}
        : Functor.OnIdProp (C‚ü∂SetoidCat) SetoidCat (@LimSet C) (@LimMap C)
    := Œª(F : C‚ü∂SetoidCat), Œª(lim : LimSet F), Œª(X : C), ‚äú

    definition LimOnMul {C : CatType}
        : Functor.OnMulProp (C‚ü∂SetoidCat) SetoidCat (@LimSet C) (@LimMap C)
    := Œª(F G H : C‚ü∂SetoidCat), Œª(f : F ‚üπ G), Œª(g : G ‚üπ H), Œª(lim : LimSet F), Œª(X : C), ‚äú

end Setoid

-- limit in SetoidCat
definition Setoid.Lim {C : CatType}
    : (C‚ü∂SetoidCat)‚ü∂SetoidCat :=
    Functor.MkOb
        (@Setoid.LimSet C)
        (@Setoid.LimMap C)
        (@Setoid.LimOnId C)
        (@Setoid.LimOnMul C)

definition SetoidCatHasLim (C : CatType) : Lim C SetoidCat :=
    RightAdj.mk
        (@Setoid.Lim C)
        (Adjunction.mk
        /- unit : ùüô ‚üπ (Lim ‚äó Delta) -/
            (Functor.MkHom
            /- onOb -/    ( Œª(T : SetoidCat), Setoid.MkHom
                /- onEl -/ ( Œª(t : T), Setoid.MkLim
                    ( Œª(X : C), t)
                    ( Œª(X Y : C), Œª(m : X ‚áíC‚áí Y), ‚äú))
                /- onEqu -/ ( Œª(t1 t2 : T), Œª(eq : t1 ‚â°(T)‚â° t2), Œª(X : C), eq))
            /- onHom -/    ( Œª(T T' : SetoidCat), Œª(f : T ‚•§ T'), Œª(t : T), ‚äú))
        /- counit : (Delta ‚äó Lim) ‚üπ ùüô-/
            (Functor.MkHom
            /- onOb -/ ( Œª(F : C‚ü∂SetoidCat), Functor.MkHom
                /- onOb -/ ( Œª(X : C), Setoid.MkHom -- : LimSet F ‚•§ (F X)
                    /- onEl -/ ( Œª(lim : Setoid.LimSet F), (lim X))
                    /- onEqu -/ ( Œª(lim lim': Setoid.LimSet F), Œª(eq : lim ‚â°(Setoid.LimSet F)‚â° lim'), eq X))
                /- onHom -/ ( Œª(X Y: C), Œª(m : X ‚áíC‚áí Y), sorry
                    /- (UnitRInv (lim Y)) * (atHom lim m) -/ ))
            /- onHom -/ sorry)
            sorry
            sorry)
