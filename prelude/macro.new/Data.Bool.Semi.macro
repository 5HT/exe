Data.Unit.{u,p} :=

    -- import is just a reference to a named expression in the file-system
    let (Prop := #Prop)
        (Poset := #Poset)
        (Mini := #Mini)
    in new record

-- sugar (A1:Alg) ⟹ (A2:Alg) := Alg.Hom A1 A2

( Alg := new record
    ( SemiOb : Type := Poset )
    ( SemiHom (A1, A2 : SemiOb) : Poset := new
        ( El := record
            (extends map : .El (A1 ⥤ A2))
            ( True : A2.El )
            ( False : A2.El ) )
        ( To m1 m2 := record
            ( true2 : m1.True =A2= m2.True )
            ( false2 : m1.False =A2= m2.False )
            ( extends equ : m1 =(A1 ⥤ A2)= m2) )
        ( Trans m1 m2 m3 mto12 mto23 := new
            ( true2 := A2.Trans m1.True m2.True m3.True mto12.true2 mto23.true2 )
            ( false2 := A2.Trans m1.False m2.False m3.False mto12.false2 mto23.false2 )
            ( equ := .Trans (A1 ⥤ A2) m1.map m2.map m3.map mto12.equ mto23.equ) )
    ( SemiMul (A1, A2, A3 : SemiOb)
        (m23 : SemiHom A2 A3) (m12 : SemiHom A1 A2) : SemiHom A1 A3 := new
            ( map := Poset.MapEl A1 A2 A3 m23 m12 )
            ( True := m23.el $ m12.True )
            ( False := m23.el $ m12.False ) )
    ( Ob : Type := record
        ( extends ob : SemiOb )
        ( id : SemiHom ob ob )
        ( idemp : (SemiMul ob ob ob id id) =(SemiHom ob ob)= id ) )
    ( Hom (A1, A2 : Ob) : Poset := new
        ( El := SemiHom.El A1 A2 )
        ( To m1 m2 := record
            ( extends equ : SemiHom.To m1 m2 )
            ( left : (SemiMul A1 A1 A2 A1.id m1) =(SemiHom ob ob)= m2 )
            ( right : (SemiMul A1 A2 A2 m1 A2.id) =(SemiHom ob ob)= m2 ) )
        ( Trans m1 m2 m3 mto12 mto23 := new
            ()
            )
        )
    ( Mul (A1, A2, A3 : Alg)
        (m23 : A2 ⟹ A3) (m12 : A1 ⟹ A2) : A1 ⟹ A3 :=
            let (setmul := Poset.Mul A1 A2 A3 m23.el m12.el)
            in new
        ( el := setmul.el )
        ( ok := new
            ( true1 := A3.Trans
                (m23.el (m12.el A1.True.el))
                (m23.el A2.True.el)
                (A3.True.el)
                (m23 $/ m12.ok.true1)
                (m23.ok.true1) )
            ( false1 := A3.Trans
                (m23.el (m12.el A1.False.el))
                (m23.el A2.False.el)
                (A3.False.el)
                (m23 $/ m12.ok.false1)
                (m23.ok.false1) )
            ( equ := setmul.ok ) ) )
    ( `@` := Ob )

( Init : Alg := new
    ( Carrier := new
        ( El := record (onOb : ∀ (A : Alg) → A.El) )
        ( To e1 e2 := record
            (onHom : ∀ (A1, A2 : Alg) → ∀ (hom : A1 ⟹ A2) →
                ((hom.el $ (e1.onOb A1)) =A2= (e2.onOb A2))) )
        ( Trans.onHom e1 e2 e3 eto12 eto23 A1 A2 hom :=
             A2.Trans
                (hom.el $ (e1.onOb A1)) (e2.onOb A2) (e3.onOb A2)
                (eto12.onHom A1 A2 hom) (eto23.onHom A2 A2 (Alg.Id A2)) ) )
    ( True := new
        ( el.onOb A := A.True.el )
        ( ok.onHom A1 A2 hom := hom.ok.true1 ) )
    ( False := new
        ( el.onOb A := A.False.el )
        ( ok.onHom A1 A2 hom := hom.ok.false1 ) ) )

( Endo : Poset := Init ⟹ Init )
( IId : Endo := Alg.Id Init )
( PredicateRec : Type := record
    ( P : PredicateSet Init )
    ( true : P.el $ Init.True.el )
    ( false : P.el $ Init.False.el ) )

( recur := new record
    ( forOb (A : Alg) : Init ⟹ A := new
        ( el u := u A )
        ( ok := new
            ( true1 := A.True.ok )
            ( false1 := A.False.ok )
            ( equ u1 u2 uto12 := uto12.onHom A A (Alg.Id A) ) ) )
    ( forHom (A1, A2 : Alg) (hom : A1 ⟹ A2)
        :   let (mulhomrec := Alg.Mul Init A1 A2 hom (recur.forOb A1)) in
                mulhomrec =(Init ⟹ A2)= (recur.forOb A2) := new
        ( true1 := mulhomrec.ok.true1 )
        ( false1 := mulhomrec.ok.false1 )
        ( equ.onHom i1 i2 ito12 := ito12.onHom A1 A2 hom ) )
    ( forId : (recur.forOb Init) =Endo= IId := new
        ( true1 := recur.forOb.ok.true1 Init )
        ( false1 := recur.forOb.ok.false1 Init )
        ( equ.onHom a1 a2 ato12 A1 A2 hom :=
            ato12.onHom Init A2 (Alg.Mul Init A1 A2 hom (recur.forOb A1)) )

( Sigma (pr : PredicateRec) : Alg :=
    ( Carrier := Mini.SmallSigmaSet Init pr.P )
    ( True := new
        ( el := Init.True.el )
        ( ok := new
            ( pred1 := pr.true )
            ( to := Init.True.ok) ) )
    ( False := new
        ( el := Init.False.el )
        ( ok := new
            ( pred1 := pr.false)
            ( to := Init.False.ok) ) ) )
( SInj (pr : PredicateRec) : (Sigma pr) ⟹ Init := new
    ( el := Pred2Sub.i.el Init pr.P )
    ( ok := new
        ( true1 := Init.True.ok )
        ( false1 := Init.False.ok )
        ( equ := Pred2Sub.i.ok Init pr.P ) ) )

( recurP := new record
    ( forOb (pr : PredicateRec) := recur.forOb (Sigma pr) )
    ( forHom (pr : PredicateRec) := recur.forHom (Sigma pr) Init (SInj pr) ) )

( section (pr : PredicateRec)
        : Mini.isSection Init (Mini.Pred2Sub Init pr.P) (recur.forOb.hom (Sigma pr)) :=
    Endo.Trans.equ
        (Alg.Mul Init (Sigma pr) Init (SInj pr) (recurP.forOb pr))
        (recur.forOb Init)
        IId
        (recurP.forHom pr)
        recur.forId )
( induc (pr : PredicateRec) : Mini.Forall Init pr.P :=
    Mini.sec2all Init pr.P (recurP.forOb.hom pr) (section pr) )
