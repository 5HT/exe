Data.Unit.{u,p} :=

    -- import is just a reference to a named expression in the file-system
    let (Prop := #Prop)
        (Poset := #Poset)
        (Mini := #Mini)
    in new record

-- sugar (A1:Alg) ⟹ (A2:Alg) := Alg.Hom A1 A2

( Alg : SemiCat := new
    ( SemiOb := Poset )
    ( SemiHom A1 A2 := Poset.record
        (hom : A1 ⥤ A2)
        (True : A2)
        (False : A2) )
    ( SemiMul A1 A2 A3 Poset.{h23,h12} := new
        (hom := Poset.Mul.el A1 A2 A3 {h23.hom,h12.hom} ),
        (True := h23.hom h12.True)
        (False := h23.hom h12.False) ) )

( Init : Alg := new
    ( ob := new
        ( El := record (onOb : ∀ (A : Alg) → A.El) )
        ( To e1 e2 := record
            (onHom : ∀ (A1, A2 : Alg) → ∀ (hom : A1 ⟹ A2) →
                ((hom.el $ (e1.onOb A1)) =A2= (e2.onOb A2))) )
        ( Trans.onHom e1 e2 e3 eto12 eto23 A1 A2 hom :=
             A2.Trans
                (hom.el $ (e1.onOb A1)) (e2.onOb A2) (e3.onOb A2)
                (eto12.onHom A1 A2 hom) (eto23.onHom A2 A2 (Alg.Id A2)) ) )
    ( id := Poset.new
        ( hom := Poset.Id ob )
        ( True := new
            ( el.onOb A := A.True.el )
            ( ok.onHom A1 A2 hom := hom.ok.true1 ) )
        ( False := new
            ( el.onOb A := A.False.el )
            ( ok.onHom A1 A2 hom := hom.ok.false1 ) ) )
    ( mul := new (hom:=Poset.IdId ob)(True := id.True.ok)(False := id.False.ok) )

( Endo : Poset := Init ⟹ Init )
( IId : Endo := Alg.Id Init )
( PredicateRec : Type := record
    ( P : PredicateSet Init )
    ( true : P.el $ Init.True.el )
    ( false : P.el $ Init.False.el ) )

( recur := new record
    ( forOb (A : Alg) : Init ⟹ A := new
        ( el u := u A )
        ( ok := new
            ( true1 := A.True.ok )
            ( false1 := A.False.ok )
            ( equ u1 u2 uto12 := uto12.onHom A A (Alg.Id A) ) ) )
    ( forHom (A1, A2 : Alg) (hom : A1 ⟹ A2)
        :   let (mulhomrec := Alg.Mul Init A1 A2 hom (recur.forOb A1)) in
                mulhomrec =(Init ⟹ A2)= (recur.forOb A2) := new
        ( true1 := mulhomrec.ok.true1 )
        ( false1 := mulhomrec.ok.false1 )
        ( equ.onHom i1 i2 ito12 := ito12.onHom A1 A2 hom ) )
    ( forId : (recur.forOb Init) =Endo= IId := new
        ( true1 := recur.forOb.ok.true1 Init )
        ( false1 := recur.forOb.ok.false1 Init )
        ( equ.onHom a1 a2 ato12 A1 A2 hom :=
            ato12.onHom Init A2 (Alg.Mul Init A1 A2 hom (recur.forOb A1)) )

( Sigma (pr : PredicateRec) : Alg :=
    ( Carrier := Mini.SmallSigmaSet Init pr.P )
    ( True := new
        ( el := Init.True.el )
        ( ok := new
            ( pred1 := pr.true )
            ( to := Init.True.ok) ) )
    ( False := new
        ( el := Init.False.el )
        ( ok := new
            ( pred1 := pr.false)
            ( to := Init.False.ok) ) ) )
( SInj (pr : PredicateRec) : (Sigma pr) ⟹ Init := new
    ( el := Pred2Sub.i.el Init pr.P )
    ( ok := new
        ( true1 := Init.True.ok )
        ( false1 := Init.False.ok )
        ( equ := Pred2Sub.i.ok Init pr.P ) ) )

( recurP := new record
    ( forOb (pr : PredicateRec) := recur.forOb (Sigma pr) )
    ( forHom (pr : PredicateRec) := recur.forHom (Sigma pr) Init (SInj pr) ) )

( section (pr : PredicateRec)
        : Mini.isSection Init (Mini.Pred2Sub Init pr.P) (recur.forOb.hom (Sigma pr)) :=
    Endo.Trans.equ
        (Alg.Mul Init (Sigma pr) Init (SInj pr) (recurP.forOb pr))
        (recur.forOb Init)
        IId
        (recurP.forHom pr)
        recur.forId )
( induc (pr : PredicateRec) : Mini.Forall Init pr.P :=
    Mini.sec2all Init pr.P (recurP.forOb.hom pr) (section pr) )
