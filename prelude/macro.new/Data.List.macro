Data.Nat.{u,p} (T : Poset) :=

    -- import is just a reference to a named expression in the file-system
    let ( Prop := #Prop )
        ( Poset := #Poset )
        ( Mini := #Mini )
    in new record

-- sugar (A1) ⟹ (A2) := Alg.Hom A1 A2
-- sugar (m1) o (m2) := Poset.Mul ....

( Alg := new record
    ( Ob : Type := record
        ( default Carrier : Poset )
        ( MkNil : Carrier )
        ( MkCons : (T * Carrier) ⥤ Carrier ) )
    ( `@` := Ob )
    ( Hom (A1, A2 : Alg) : Poset :=
        ( El := .El (A1 ⥤ A2) )
        ( To m1 m2 := record
            ( mknil1 : (m1 $ A1.MkNil.el) =(A2)= A2.MkNil.el )
            ( mkcons1 : (m1 o A1.MkCons.el) =((T*A1) ⥤ A2)= (A2.MkSucc.el o (T */ m1)) )
            ( default equ : m1 =(A1 ⥤ A2)= m2) )
        ( Trans m1 m2 m3 mto12 mto23 := new
            ( mkzero1 := mto12.mkzero1 )
            ( mksucc1 := mto12.mksucc1 )
            ( equ := .Trans (A1 ⥤ A2) m1 m2 m3 mto12.equ mto23.equ) )
    ( Id (A : Alg) : A ⟹ A :=
        let (setid := Poset.Id A) in new
        ( el := setid.el )
        ( ok := new
            ( mkzero1 := A.MkZero.ok )
            ( mksucc1 := A.MkSucc.ok )
            ( equ := setid.ok) ) )
    ( Mul (A1, A2, A3 : Alg)
        (m23 : A2 ⟹ A3) (m12 : A1 ⟹ A2) : A1 ⟹ A3 :=
            let (setmul := Poset.Mul A1 A2 A3 m23.el m12.el)
            in new
        ( el := setmul.el )
        ( ok := new
            ( mknil1 := .Trans (A3)
                (m23.el $ (m12.el $ A1.MkNil.el))
                (m23.el $ A2.MkNil.el)
                (A3.MkNil.el)
                (m23 $/ m12.ok.mknil1)
                (m23.ok.mknil1) )
            ( mkcons1 := .Trans ((T*A1) ⥤ A3)
                (m23.el o (m12.el o A1.MkSucc.el))
                (m23.el o (A2.MkSucc.el o (T */ m12.el)))
                (A3.MkSucc.el o (T */ (m23.el o m12.el)))
                (m23 o/ m12.ok.mksucc1)
                (m23.ok.mksucc1 /o (T */ m12)) )
            ( equ := setmul.ok ) ) )

( Init : Alg := new
    ( Carrier := new
        ( El := record (onOb : ∀ (A : Alg) → A.El) )
        ( To e1 e2 := record
            (onHom : ∀ (A1, A2 : Alg) → ∀ (hom : A1 ⟹ A2) →
                ((hom.el $ (e1.onOb A1)) =A2= (e2.onOb A2))) )
        ( Trans.onHom e1 e2 e3 eto12 eto23 A1 A2 hom :=
             A2.Trans
                (hom.el $ (e1.onOb A1)) (e2.onOb A2) (e3.onOb A2)
                (eto12.onHom A1 A2 hom) (eto23.onHom A2 A2 (Alg.Id A2)) ) )
    ( MkNil := new
        ( el.onOb A := A.MkNil.el )
        ( ok.onHom A1 A2 hom := hom.ok.mknil1 ) )
    ( MkCons := new
        ( el.onEl.onOb {t,u} A := A.MkSucc.el $ (u.onOb A) )
        ( ok.onTo.onHom {t1,u1} {t2,u2} {tto12,uto12} A1 A2 hom :=
            hom.ok.mkcons1 /$/ {tto12 , (uto12.onHom A1 A2 hom)} ) ) )

( Endo : Poset := Init ⟹ Init )
( IId : Endo := Alg.Id Init )
( PredicateRec : Type := record
    ( P : PredicateSet Init )
    ( nil : (P.el $ Init.MkNil.el) )
    ( cons : Mini.Imply (T * Init) (P o .2) (P o Init.MkCons) ) )

( recur := new record
    ( forOb (A : Alg) : Init ⟹ A := new
        ( el.onEl u := u A )
        ( ok := new
            ( mknil1 := A.MkNil.ok )
            ( mkcons1.onTo {t1,n1} {t2,n2} {tto12,nto12} :=
                A.MkCons.ok /$/ {tto12 , (nto12.onHom A A (Alg.Id A))} )
            ( equ.onTo u1 u2 uto12 := uto12.onHom A A (Alg.Id A) ) ) )
    ( forHom (A1, A2 : Alg) (hom : A1 ⟹ A2)
        :   let (mulhomrec := Alg.Mul Init A1 A2 hom (recur.forOb A1)) in
                mulhomrec =(Init ⟹ A2)= (recur.forOb A2) := new
        ( mknil1 := mulhomrec.ok.mknil1 )
        ( mkcons1 := mulhomrec.ok.mkcons1 )
        ( equ.onTo i1 i2 ito12 := ito12.onHom A1 A2 hom ) )
    ( forId : (recur.forOb Init) =Endo= IId := new
        ( mknil1 := recur.forOb.ok.mknil1 Init )
        ( mkcons1 := recur.forOb.ok.mkcons1 Init )
        ( equ.onTo.onHom a1 a2 ato12 A1 A2 hom :=
            ato12.onHom Init A2 (Alg.Mul Init A1 A2 hom (recur.forOb A1)) ) ) )

( Sigma (pr : PredicateRec) : Alg :=
    ( Carrier := Mini.SmallSigmaSet Init pr.P )
    ( MkNil := new
        ( el := Init.MkNil.el )
        ( ok := new
            ( pred1 := pr.nil )
            ( to := Init.MkNil.ok) ) )
    ( MkCons := new
        ( el := Init.MkSucc.el )
        ( ok.onTo {t1,n1} {t2,n2} {tto12,nto12} := new
            ( pred1 := (pr.cons $ {t1,n1}) n1.ok.pred1 )
            ( to := Init.MkCons.ok.onTo {t1,n1} {t2,n2} {tto12,nto12}) ) ) )
( SInj (pr : PredicateRec) : (Sigma pr) ⟹ Init := new
    ( el := Pred2Sub.i.el Init pr.P )
    ( ok := new
        ( mknil1 := Init.MkNil.ok )
        ( mkcons1 := Init.MkCons.ok )
        ( equ := Pred2Sub.i.ok Init pr.P ) ) )

( recurP := new record
    ( forOb (pr : PredicateRec) := recur.forOb (Sigma pr) )
    ( forHom (pr : PredicateRec) := recur.forHom (Sigma pr) Init (SInj pr) ) )

( section (pr : PredicateRec)
        : Mini.isSection Init (Mini.Pred2Sub Init pr.P) (recur.forOb.hom (Sigma pr)) :=
    Endo.Trans.equ
        (Alg.Mul Init (Sigma pr) Init (SInj pr) (recurP.forOb pr))
        (recur.forOb Init)
        IId
        (recurP.forHom pr)
        recur.forId )
( induc (pr : PredicateRec) : Mini.Forall Init pr.P :=
    Mini.sec2all Init pr.P (recurP.forOb.hom pr) (section pr) )
