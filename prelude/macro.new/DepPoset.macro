let ( Prop := #Prop ) -- import from external parsed expression
    ( Poset := #Poset ) in
DepPoset (Base : Poset) := new record

-- type of objects of the Poset category
( Ob.{u,p} : Type := record

    -- stored fields, given by types
    ( atEl (e : Base.El) : Poset )
    ( atTo (e1, e2 : Base.El) : (e1 =Base= e2) ⥤ (atEl e1 ⥤ atEl e2) )
    ( atTrans (e1, e2, e3 : El) (eto12 : e1 =Base= e2) (eto23 : e2 =Base= e3) (f1 : atEl.El e1) :
        ((atTo e2 e3 eto23) o (atTo e1 e2 eto12) $ f1)
            =(atEl e3)=
        (atTo e1 e3 (B.Trans e1 e2 e3 eto12 eto23) $ f1) )
    ( atUnTrans : ... )
)

( Hom.{u1, p1, u2, p2}
        (A : DepPoset.{u1, p1}) (B : DepPoset.{u2, p2})
        : Poset.{u2, p2} := new
    ( El := record
        ( onEl (e : Base.El) : .El (A $$ e ⥤ B $$ e) ) )
    ( To f1 f2 := record
        ( onTo (e1, e2 : Base.El) (a1 : A $$ e1) (a2 : A $$ e2) :
            (a1 == a2) →
                ((f1.onEl e1 a1.el) =B= (f2.onEl e2 a2.el)) ) )
    ( Trans.onTo f1 f2 f3 fto12 fto23 a1 a2 ato12 :=
        B.Trans (f1.onEl e1 a1.el) (f2.onEl e2 a1.el) (f3.onEl e3 a2.el)
            (fto12.onTo e1 e1 a1 a1 a1.ok) (fto23.onTo e1 e2 a1 a2 ato12) ) )

( `⥤` (that:Poset) := DepPoset.Hom this that)
( `@` := Ob ) -- [coercion]

( Id.{u1, p1} (A : Poset.{u1, p1}) : A ⥤ A := new
    ( el.onEl a := a  )
    ( ok.onTo a1 a2 ato12 := ato12 ) )
( Mul.{u1, p1, u2, p2, u3, p3}
        (A : Poset.{u1, p1}) (B : Poset.{u2, p2}) (C : Poset.{u3, p3}) :
        (B ⥤ C) *P* (A ⥤ B) ⥤ (A ⥤ C) := new
    ( el.onEl.onEl {mBC,mAB} a := mBC.onEl (mAB.onEl a) )
    ( ok.onTo.onTo {mBC1,mAB1} {mBC2,mAB2} {mBCto12,mABto12} a1 a2 ato12 :=
        mBCto12 (mAB $ a1) (mAB $ a2) (mABto12.onTo a1 a2 ato12)) )

-- opposite poset
( Opp := new record
    (onOb (A : Poset) : Poset := new
        (El := A.El)
        (To e1 e2 := A.To e2 e1)
        (Trans e1 e2 e3 eto12 eto23 := A.Trans e3 e2 e1 eto23 eto12))
    (onHom (A,B : Poset) : Opp (A ⥤ B) ⥤ ((Opp A) ⥤ (Opp B)) := new
        (el.onEl f := f)
        (ok.onTo.onTo f1 f2 fto21 a1 a2 ato21 := fto21 /$/ ato21 ) ) )

( BigSigma (F : DepPoset) : Poset := new
    (El := record
        ( base : Base.El )
        ( fib : F.atEl.El base) )
    (To {b1,f1} {b2,f2} := record
        ( base : b1 =Base= b2 )
        ( fib : ((F.atTo b1 b2 $ base) $ f1) =(F.atEl b2)= f2 ) )
    (Trans {b1,f1} {b2,f2} {b3,f3} {bto12,fto12} {bto23,fto23} := new
        ( base := Base.Trans b1 b2 b3 bto12 bto23 )
        ( fib := .Trans3 (F.atEl b3)
            ((F.atTo b1 b3 $ base) $ f1)
            ((F.atTo b2 b3 $ bto23) $ (F.atTo b1 b2 $ bto12) $ f1)
            ((F.atTo b2 b3 $ base) $ f2)
            f3
            (F.atTransUn b1 b2 b3 bto12 bto23 f1)
            ((F.atTo b2 b3 $ bto23) $/ fto12)
            fto23 ) ) )
