-- church encoding for Prop
Prop.{p} := new record

    -- OM's reserved name, works like Lean's [coercion] mechanics
    -- below `Prop` will be coerced to `Prop/@` (in type positions only)
    ( `@` := *.{p} )

    -- `Prod0` is module for is encoded TRUE proposition
    ( Prod0 := new record

        -- encoded proposition
        ( `@` : Prop :=
            ∀ (Prop0 : Prop.{p}) →
            ∀ (Intro : True) →
            Prod0 ) -- overloaded variable!

        -- encoded constructor
        ( Intro : Prod0 :=
            λ (True : Prop.{p}) →
            λ (Intro : True) →
            Intro ) -- overloaded variable!
    )

    -- `Prod2` is module for is encoded AND proposition
    ( Prod2 := new record

        -- encoded proposition
        ( `@` (P1, P2 : Prop.{p}) : Prop :=
            ∀ (Prod2 : Prop.{p}) →
            ∀ (Intro : P1 → P2 → Prod2) →
            Prod2 )

        -- encoded constructor
        ( Intro (P1, P2 : Prop.{p}) (p1 : P1) (p2 : P2) : Prod2 P1 P2 :=
            λ (Prod2 : Prop.{p}) →
            λ (Intro : P1 → P2 → And) →
            Intro p1 p2 )

        -- encoded projection
        ( Pr1 (P1, P2 : Prop.{p}) (prod2 : Prod2 P1 P2) : P1 :=
            prod2 P1 (λ (p1 : P1) → λ (p2 : P2) → p1)
        )

        -- encoded projection
        ( Pr1 (P1, P2 : Prop.{p}) (prod2 : Prod2 P1 P2) : P1 :=
            prod2 P1 (λ (p1 : P1) → λ (p2 : P2) → p1)
        )
    )

    ( church : encoding.{p} :=
        new _
            Prod0 Prod0.Intro
            Prod2 Prod2.Intro Prod2.Pr1 Prod2.Pr2
    )
