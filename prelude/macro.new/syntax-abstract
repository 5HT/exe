Syntax.Abstract
    -- types of tokens as parameters
    ( token : record
        (id : *)
        (digits : *)
        (etc : *) )
:= new record
( `@` : * := IdsAssign )

( Level : * := data
    ( MkLevelVal (levelVal : token.digits) : Level )
    ( MkLevelVar (levelVar : token.id) : Level )
    ( MkLevelCtx (levelCtx : List univ-arg) : Level ) )

( Id : * := data
    ( MkIdOper (idOper : token.etc) : Id )
    ( MkIdPath (idPath : List token.id) (levels : Maybe (List Level)) : Id ) )

( IdsType : * := List record
    ( ids : List Id )
    ( types : IdsType )
    ( type : Expr ) )

( IdsAssign : * := List record
    ( ids : List Id )
    ( matches : IdsMatch )
    ( type : Maybe Expr )
    ( value : Expr) )

( IdsMatch : * := List data
    ( MkMatchId (id : Id) : IdsMatch)
    ( MkMatchRecord (ids : Tree Id) : IdsMatch) )

( Expr : * := data
    ( MkExprId (id : Id) : Expr )               -- identifier reference
    ( MkExprFile (id : Id) : Expr )             -- external file reference
    ( MkExprApp (fun, arg : Expr) : Expr )      -- application (left-associative)
    ( MkExprLet (assigns : IdsAssign) (expr : Expr) : Expr )  -- local identifiers
    ( MkExprForall (argsT : IdsType) (resT : Expr) : Expr )   -- function type, dependent
    ( MkExprFunc (dom, cod : Expr) : Expr )     -- function type, non-dependent
    ( MkExprLambda (args : IdsMatch) (res : Expr) : Expr )  -- function value
    ( MkExprRecord (storedFields : IdsType)
                   (computedFileds : IdsAssign) : Expr)     -- record type
    ( MkExprNew (fieldAssigns : IdsAssign) : Expr )         -- record value
    ( MkExprTuple (fieldValues : List Expr) : Expr )        -- record value, Erlang-style tuple
    ( MkExprUniverse (level : Level) : Expr )               -- universe
    ( MkExprPacked (encoding : Encoding) (expr : Expr) : Expr ) -- TODO call encoding instance
    ( MkExprMacro (???) : Expr )
