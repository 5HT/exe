-- terminals

id-token, digits-token, etc-token.

-- top level non-terminal
<@> ::= <id-assign>.

-- universes
<level> ::=
    digits-token |
    id-token |
    "(" [<level-seq>] ")".
<level-seq> ::= <level> [ "," <Level-seq> ].

-- identifiers with namespaces
<id-path> ::=
    "`" etc-token "`" |
    [ [<id-path>] "." ] id-token [ ".{" <level-seq> "}" ].
<id-path-seq> := <id-path> ["," <id-path-seq>].

-- fields of records, parameters of functions
<id-type> ::= <id-path-seq> <id-type-seq> ':' <expr>.
<id-assign> ::= <id-path-seq> <id-match-seq> [':' <expr>] ':=' <expr>.
<id-match> ::= <id-path> | "{" [<id-match-comma-seq>] "}".
<id-type-seq> ::= [ "(" <id-type> ")" <id-type-seq> ].
<id-assign-seq> ::= [ "(" <id-assign> ")" <id-assign-seq> ].
<id-match-comma-seq> ::= <id-match> ["," <id-match-comma-seq>].
<id-match-seq> ::=
    [ <id-match> <id-match-seq> ] |
    [ "(" <id-match> ")" <id-match-seq> ].

-- expessions (w/o priority)
<expr> ::=
    <id-path>               | -- identifier reference
    "#" <id-path>           | -- external file reference
    "(" <expr> ")"          | -- parenthesis
    <expr> <expr>           | -- application (left-associative)
    "let" <id-assign-seq> "in" <expr>   | -- local identifiers
    "∀" <id-type-seq> "→" <expr>       | -- function type, dependent
    <expr> "→" <expr>                   | -- function type, non-dependent
    "λ" <id-match-seq> "→" <expr>      | -- function value
    "record" <id-type-seq> <id-assign-seq> | -- record type
    "new" [ "record" ] <id-assign-seq>  | -- record value
    "{ <expr-seq> }"        | -- record value, Erlang-style tuple
    * [<univ-app>]          | -- universe constant
    "packed" <encoding-instance> <expr>. -- TODO call encoding instance
    -- TODO "sugar", "macro"

<expr-seq> ::= [ <expr> ["," <expr-seq>] ].
