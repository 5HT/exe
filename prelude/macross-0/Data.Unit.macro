import minimal

namespace Data
namespace Unit

def Alg.Ob : Type.{u,p} := record
    ( Carrier : Setoid.Ob.{u,p} )
    ( Mk : [Carrier] )

def Alg.Hom (A1, A2 : Alg.Ob) := Setoid.Ob.mk
    ( El := record
        ( hom : [A1.Carrier ⥤ A2.Carrier] )
        ( homMk : (hom $ A1.Mk) ≡A2.Carrier≡ A2.Mk ) )
    ( Equ := λ (m1, m2 : El) →
        m1.hom ≡(A1.Carrier ⥤ A2.Carrier)≡ m2.hom )
    ( Refl := λ (m0 : El) →
        .Refl (A1.Carrier ⥤ A2.Carrier) m0.hom )
    ( Trans := λ (m1, m2, m3 : El) →
        λ (equ12 : Equ m1 m2) → λ (equ23 : Equ m2 m3) →
        .Trans (A1.Carrier ⥤ A2.Carrier) m1.hom m2.hom m3.hom equ12 equ23 )
    ( Sym := λ (m1, m2 : El) →
        λ (equ12 : Equ m1 m2) →
        .Sym (A1.Carrier ⥤ A2.Carrier) m1.hom m2.hom equ12 )

-- sugar (A1 ⟹ A2)

def Alg.Id (A : Alg.Ob) : [A ⟹ A] :=
    Alg.Hom.mk A A
        ( hom := Setoid.Id A.Carrier )
        ( homMk := .Refl A.Carrier A.Mk )

def Alg.Mul.onEl (A1, A2, A3 : Alg.Ob)
    (m23 : [A2 ⟹ A3]) (m12 : [A1 ⟹ A2])
    : [A1 ⟹ A3] :=
    Alg.Hom.mk A1 A3
        ( hom := Setoid.Mul.onEl A1.Carrier A2.Carrier A3.Carrier m23.hom m12.hom)
        ( homMk := .Trans A3.Carrier
            (m23.hom $ (m12.hom $ A1.Mk))
            (m23.hom $ A2.Mk)
            (A3.Mk)
            (m23.hom $/ m12.homMk)
            (m23.homMk) )

def Init : Alg.Ob := Alg.Ob.mk
    ( Carrier := Setoid.Ob.mk.{u,p}
        ( El := packed (...) record
            (atOb :
                ∀ (A : Alg.Ob) →
                A.Carrier )
            (atHom :
                ∀ (A1, A2 : Alg.Ob) → ∀ (hom : [A1 ⟹ A2]) →
                ((hom.hom $ (atOb A1)) ≡A2.Carrier≡ (atOb A2))) )
        ( Equ :=
            λ (e1, e2 : El) →
            ∀ (A : Alg.Ob) →
            ((.atOb e1 A) ≡T≡ (.atOb e2 A)) )
        ( Refl :=
            λ (e0 : El) →
            λ (A : Alg.Ob) →
            (.Refl T (.atOb e0 A)) )
        ( Trans :=
            λ (e1, e2, e3 : El) →
            λ (equ12 : Equ e1 e2) → λ (equ23 : Equ e2 e3) →
            λ (A : Alg.Ob) →
            (.Trans T (.atOb e1 A) (.atOb e2 A) (.atOb e3 A) (equ12 A) (equ23 A)) )
        ( Sym :=
            λ (e1, e2 : El) →
            λ (equ12 : Equ e1 e2) →
            λ (A : Alg.Ob) →
            (.Sym T (.atOb e1 A) (.atOb e2 A) (equ12 A)) ))
    ( Mk := Carrier.El.mk
        ( atOb :=
            λ (A : Alg.Ob) →
            A.Mk )
        ( atHom :=
            λ (A1, A2 : Alg.Ob) → λ (hom : [A1 ⟹ A2]) →
            hom.homMk ))

def recur.forOb (A : Alg.Ob) : [ Init ⟹ A ] :=
    Alg.Hom.mk Init A
        ( hom := λ (u : [Init.Carrier]) → (.atOb u A) )
        ( homMk := .Refl A.Carrier A.Mk )

def recur.forHom (A1, A2 : Alg.Ob) (hom : [A1 ⟹ A2])
    : (Alg.Mul.onEl Init A1 A2 hom (recur.forOb A1))
        ≡[ Init ⟹ A2 ]≡ (recur.forOb A2) :=
    λ (u : [Init.Carrier]) → (.atHom u A1 A2 hom)

def Endo : Setoid.Ob := Init ⟹ Init

def IId : [Endo] := Alg.Id Init

def recur.forId : (recur.forOb Init) ≡Endo≡ IId :=
    λ (u : [Init.Carrier]) →
    λ (A : Alg.Ob) →
    (.atHom u Init A (recur.forOb A)) u

def Predicate : Setoid.Ob.{p, p} := PredicateSet Init.Carrier

def Sigma (P : [Predicate]) (mk : P $ Init.Mk) : Alg.Ob :=
    ( Carrier := SmallSigmaSet Init.Carrier P )
    ( Mk := SmallSigmaSet.El.mk Init.Carrier P
        ( base := Init.Mk )
        ( pred := mk ) )

def SInj (P : [Predicate]) (mk : P $ Init.Mk)
    : [ (Sigma P mk) ⟹ Init ] :=
    Alg.Hom.mk (Sigma P mk) Init
        ( hom := Pred2Sub.i Init.Carrier P )
        ( homMk := .Refl Init.Carrier Init.Mk )

def recurP.forOb (P : [Predicate]) (mk : P $ Init.Mk)
    : [ Init ⟹ (Sigma P mk) ] :=
    recur.forOb (Sigma P mk)

def recurP.forHom (P : [Predicate]) (mk : P $ Init.Mk)
    : (Alg.Mul.onEl Init (Sigma P mk) Init (SInj P mk) (recurP.forOb P mk))
        ≡Endo≡ (recur.forOb Init) :=
    recur.forHom (Sigma P mk) Init (SInj P mk)

def section (P : [Predicate]) (mk : P $ Init.Mk)
    : isSection Init.Carrier (Pred2Sub Init.Carrier P) (recur.forOb.hom (Sigma P mk)) :=
    .Trans Endo
        (Alg.Mul.onEl Init (Sigma P mk) Init (SInj P mk) (recurP.forOb P mk))
        (recur.forOb Init)
        IId
        (recurP.forHom P mk)
        recur.forId

def induc (P : [Predicate]) (mk : P $ Init.Mk)
    : Forall.{u,p} Init.Carrier P :=
    sec2all Init.Carrier P (recurP.forOb.hom P mk) (section P mk)

end Unit
end Data
