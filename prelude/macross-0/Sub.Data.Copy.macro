import minimal

namespace Data
namespace Unit (T : Poset.Ob)

def Alg.Ob : Type.{u,p} := record
    ( Carrier : Poset.Ob.{u,p} )
    ( Mk : [T ⥤ Carrier] )

def Alg.Hom (A1, A2 : Alg.Ob) : Poset.Ob :=
    let (C1 := A1.Carrier) (C2 := A2.Carrier) in
    Poset.Ob.mk
        ( El := |C1 ⥤ C2| )
        ( To m1 m2 := packed record
            (mk1 : (Poset.Mul T A1 A2 m1 A1.Mk) ==C2== A2.Mk)
            (equ : m1 =(C1 ⥤ C2)= m2) )
        ( Trans m1 m2 m3 to12 to23 := .new
                (mk1 := to12.mk1)
                (equ := .Trans (C1 ⥤ C2) m1 m2 m3 to12.equ to23.equ) )

-- sugar (A1 ⟹ A2)

-- we want to be able to define custom projections
def .hom (A1, A2 : Alg.Ob) (mor : [A1 ⟹ A2]) : [A1.Carrier ⥤ A2.Carrier] :=
    .new
        ( el := mor.el )
        ( ok := mor.ok.equ )

def Alg.Id (A : Alg.Ob) : [A ⟹ A] :=
    let (setid := Poset.Id A.Carrier) in
    .new
        ( el := setid.el )
        ( ok := Alg.Hom.To.mk A A El El
            (mk1 := Poset.UnitL T A A.Mk) -- TODO Poset.UnitL...
            (equ := setid.ok) )

def Alg.Mul.onEl (A1, A2, A3 : Alg.Ob)
    (m23 : [A2 ⟹ A3]) (m12 : [A1 ⟹ A2]) : [A1 ⟹ A3] :=
    let (C1 := A1.Carrier) (C2 := A2.Carrier) (C3 := A3.Carrier) in
    let (setmul := Poset.Mul.onEl C1 C2 C3 m23.hom m12.hom) in
    .new
        ( el := setmul.el )
        ( ok := Alg.Hom.To.mk A1 A3 el el
            ( mk1 := .Trans3 [T ⥤ A3]
                -- el 1,2,3,4
                (Poset.Mul.onElEl T A1 A3 (Poset.Mul.onElEl A1 A2 A3 m23.map m12.map) A1.Mk)
                (Poset.Mul.onElEl T A2 A3 m23 (Poset.Mul.onElEl T A1 A2 m12.map A1.Mk))
                (Poset.Mul.onElEl T A2 A3 m23 A2.Mk)
                (A3.Mk)
                -- to 12,23,34
                (Poset.Assoc T A1 A2 A3 m23.map m12.map A1.Mk)
                (Poset.Mul.onElHom ... m23 m12.ok.mk1)
                (m23.ok.mk1) )
            ( equ := setmul.ok ) )

def Init : Alg.Ob := .new
    ( Carrier := Poset.Ob.mk.{u,p}
        ( El :=
            ∀ (A : Alg.Ob) →
            |A.Carrier| )
        ( To e1 e2 :=
            ∀ (A1, A2 : Alg.Ob) → ∀ (hom : [A1 ⟹ A2]) →
            ((hom $ (e1 A1)) =A2.Carrier= (e2 A2)) )
        ( Trans e1 e2 e3 eto12 eto23 A1 A2 hom :=
            A2.Carrier.Trans (hom $ (e1 A1)) (e2 A2) (e3 A2)
                (eto12 A1 A2 hom)
                (eto23 A2 A2 (Alg.Id A2)) )
    ( Mk := brackets.mk [T ⥤ Carrier]
        ( el t A := A.Mk.el t )
        ( ok t1 t2 tto12 A1 A2 hom := hom.ok.mk1 t1 t2 tto12 ) )

def recur.forOb (A : Alg.Ob) : [ Init ⟹ A ] :=
    brackets.mk (Init ⟹ A)
        ( el u := u A )
        ( ok := Alg.Hom.To.mk Init A el el
            ( mk1 := A.Mk.ok )
            ( equ u1 u2 uto12 := uto12 A A (Alg.Id A) ) )

def recur.forHom (A1, A2 : Alg.Ob) (hom : [A1 ⟹ A2])
    : let (mulhomrec := Alg.Mul.onEl Init A1 A2 hom (recur.forOb A1)) in
    mulhomrec =(Init ⟹ A2)= (recur.forOb A2) :=
    Alg.Hom.To.mk Init A2 mulhomrec.el (recur.forOb.el A2)
        (mk1 := mulhomrec.ok.mk1)
        (equ i1 i2 ito12 := ito12 A1 A2 hom)

def Endo : Poset.Ob := Init ⟹ Init

def IId : [Endo] := Alg.Id Init

def recur.forId : (recur.forOb Init) =Endo= IId :=
    Alg.Hom.To.mk Init Init (recur.forOb.el Init) IId.el
        (mk1 := recur.forOb.ok.mk1 Init)
        (equ u1 u2 uto12 A1 A2 hom :=
            uto12 Init A2 (Alg.Mul.onEl Init A1 A2 hom (recur.forOb A1)) )

def PredicateRec : Poset.Ob.{p, p} := record
    (P : [PredicateSet Init.Carrier])
    (mk : P.el Init.Mk.el)

def Sigma (pr : PredicateRec) : Alg.Ob := .new
    ( Carrier := SmallSigmaSet Init.Carrier pr.P )
    ( Mk := brackets.mk (SmallSigmaSet Init.Carrier pr.P)
        ( el := Init.Mk.el )
        ( ok := SmallSigmaSet.To.mk Init.Carrier pr.P el el
            (pred1 := pr.mk)
            (to := Init.Mk.ok) ) )

def SInj (pr : PredicateRec)
    : [ (Sigma P mk) ⟹ Init ] := !
        ( el := Pred2Sub.i.el Init.Carrier P )
        ( ok := Alg.Hom.To.mk (Sigma pr) Init el el
            (mk1 := Init.Mk.ok)
            (equ := Pred2Sub.i.ok Init.Carrier pr.P) )

def recurP.forOb (pr : PredicateRec)
    : [ Init ⟹ (Sigma pr) ] :=
    recur.forOb (Sigma pr)

def recurP.forHom (pr : PredicateRec)
    : (Alg.Mul.onEl Init (Sigma pr) Init (SInj pr) (recurP.forOb pr))
        =Endo= (recur.forOb Init) :=
    recur.forHom (Sigma pr) Init (SInj pr)

def section (pr : [Predicate])
    : isSection Init.Carrier (Pred2Sub Init.Carrier pr.P) (recur.forOb.hom (Sigma pr)) :=
    [I.C=>I.C].Trans
        (Poset.Mul.onEl Init.Carrier (SmallSigmaSet Init.Carrier P) Init.Carrier
            (Pred2Sub.i.el Init.Carrier P) (recurP.forOb.el P mk))
        (recur.forOb.el Init)
        IId.el
        (recurP.forHom.equ P mk)
        recur.forId.equ

def induc (P : [Predicate]) (mk : P $ Init.Mk.el)
    : Forall.{u,p} Init.Carrier P :=
    sec2all Init.Carrier P (recurP.forOb.hom P mk) (section P mk)

end Unit
end Data
