--
-- even more minimal macross example
--

-- universes
def Type.{t} : *.{t+1} := *.{t}
def Prop.{p} : *.{p+1} := *.{p}

-- church encoding for Prop

namespace Prop

    -- Prod0 = True; Prod2 = And;

    def Prod0.{p} : Prop.{p} :=
        ∀ (True : Prop.{p}) →
        ∀ (Mk : True) →
        True

    def Prod0.Mk.{p} : Prod0.{p} :=
        λ (True : Prop.{p}) →
        λ (Mk : True) →
        Mk

    def Prop0.elim.{p} (True : Prop.{p}) (Mk : True) (true : Prod0.{p}) : True :=
        true True Mk

    def Prod2.{p} (A, B : Prop.{p}) : Prop.{p} :=
        ∀ (And : Prop.{p}) →
        ∀ (Mk : A → B → And) →
        And

    def Prod2.Mk.{p} (A, B : Prop.{p})
        (a : A) (b : B) : Prod2.{p} A B :=
        λ (And : Prop.{p}) →
        λ (Mk : A → B → And) →
        Mk a b

    def Prop2.elim.{p} (A, B : Prop.{p}) (And : Prop.{p})
        (Mk : A → B → And) (and : Prod2.{p} A B) : And :=
        and And Mk

    -- aka DEP.AND
    def Sigma.{p} (A : Prop.{p}) (B : A → Prop.{p})
        : Prop.{p} :=
        ∀ (P : Prop.{p}) →
        ∀ (Mk : ∀ (a : A) → ∀ (b : B a) → P) →
        P

    def Sigma.Mk.{p} (A : Prop.{p}) (B : A → Prop.{p})
        (a : A) (b : B a) : Sigma.{p} A B :=
        λ (P : Prop.{p}) →
        λ (Mk : ∀ (a : A) → ∀ (b : B a) → P) →
        Mk a b

    def Sigma.pr1 (A : Prop.{p}) (B : A → Prop.{p})
        (s : Sigma A B) : A :=
        s A (λ (a : A) → λ (b : B a) → a)

    def Sigma.pr2 (A : Prop.{p}) (B : A → Prop.{p})
        (B.Cong : ∀ (a1, a2 : A) → (B a1 → B a2))
        (s : Sigma A B) : B (Sigma.pr1 s) :=
        s (B (Sigma.pr1 s)) (λ (a : A) → λ (b : B a) → B.cong a (Sigma.pr1 s) b)

    def Sigma.induc (A : Prop.{p}) (B : A → Prop.{p})
        (s : Sigma A B)
        (P : Sigma A B → Prop.{p})
        (P.cong : ∀ (s1, s2 : Sigma A B) → (P s1 → P s2))
        (mk : ∀ (a : A) → ∀ (b : B a) → P (Sigma.Mk a b))
        : P s :=
        s (P s) (λ (a : A) → λ (b : B a) → P.cong (Sigma.Mk a b) s (mk a b))

    def church.{p} : encoding.{p} :=
        encoding.mk Prod0.{p} Prod0.Mk.{p} Prod2.{p} Prod2.Mk.{p} Prod2.elim.{p}

end Prop

namespace Poset

    def Ob.{u, p} : Type.{(u+1,p+1,p)} := record
        (El : Type.{u})
        (To : ∀(e1, e2 : El) → Prop.{p})
        (Trans : ∀(e1, e2, e3 : El) → To e1 e2 → To e2 e3 → To e1 e3)

    def Ob.Ok (S : Ob) (el : El) → Prop := S.To el el
    def brackets (S : Ob) : Type := record (el : S.El) (ok : S.To el el)

--  sugar ( [A] ), (a1 =A= a2) -- irreversible equality is inequality

    def Hom.{u1, p1, u2, p2} (A : Ob.{u1, p1}) (B : Ob.{u2, p2})
        : Ob.{u2, p2} := Ob.mk
        ( El := A.El → B.El )
        ( To f1 f2 := ∀(a1, a2 : [A]) →
            (a1 ==A== a2) → ((f1 a1.el) =B= (f2 a2.el)))
        ( Trans f1 f2 f3 fto12 fto23 :=
            λ (a1, a2 : [A]) → λ (ato12 : a1 ==A== a2) →
            .Trans B
                (f1 a1.el) (f2 a1.el) (f3 a2.el)
                (fto12 a1 a1 a1.ok) (fto23 a1 a2 ato12) )

--  sugar (A ⥤ B), (f $ x), (f [$] x), (f $/ xTo), (fTo /$ x)

    def Id.{u1, p1} (A : Ob.{u1, p1}) : [A ⥤ A] := brackets.mk (A ⥤ A)
        ( el a := a )
        ( ok a1 a2 := Prop.id (a1 ==A== a2))

    def Mul.onEl.{u1, p1, u2, p2, u3, p3}
        (A : Ob.{u1, p1}) (B : Ob.{u2, p2}) (C : Ob.{u3, p3})
        (f : [B ⥤ C]) (g : [A ⥤ B]) : [A ⥤ C] := brackets.mk (A ⥤ C)
        ( el a := (f $ (g $ a)) )
        ( ok a1 a2 to12 := (f $/ (g $/ to12)) )

end Poset

--
def PropSet.{p} : Poset.Ob.{p, p} := Poset.Ob.mk.{p, p}
    (El := Prop.{p})
    (To := P1 → P2)
    (Trans P1 P2 P3 to12 to23 p1 := to23 (to12 p1))

--
def PredicateSet.{u, p} (X : Poset.Ob.{u, p}) : Poset.Ob.{p, p} :=
    X ⥤ PropSet.{p};

--
def SmallSigmaSet.{u, p} (B : Poset.Ob.{u, p}) (P : [PredicateSet.{u, p} B]) : Poset.Ob.{u, p} :=
    Poset.Ob.mk.{u, p}
    ( El := B.El )
    ( To b1 b2 := record
        (pred1 : P $ b1)
        (to : b1 =A= b2) )
    ( Trans b1 b2 b3 to12 to23 := To.mk b1 b3
        (pred1 := to12.pred1)
        (to := .Trans B b1 b2 b3 to12.to to23.to) )

--
def SubsetType.{u, p} (B : Poset.Ob.{u, p}) : Type.{(u+1,p+1,p),(u,p),p} := record
    (A : Poset.Ob.{u, p} )
    (i : [A ⥤ B] )
    (uniq : ∀ (a1, a2 : [A]) →
        ((i $ a1.el) =B= (i $ a2.el)) → (a1 ==A== a2) )

--
def Pred2Sub.{u, p} (B : Poset.Ob.{u, p}) (P : [PredicateSet.{u, p} B])
    : SubsetType.{u,p} B := SubsetType.mk.{u,p}
    ( A := SmallSigmaSet B P )
    ( i := brackets.mk (A ⥤ B)
        ( el a := a )
        ( ok a1 a2 to12 := to12.to)
    ( uniq a1 a2 to12 := SmallSigmaSet.To.mk B P a1.el a2.el
        ( pred1 := a1.ok.pred1 )
        ( to := to12) )

--
def Sub2Pred.{u, p} (B : Poset.Ob.{u, p}) (S : SubsetType.{u, p} B)
    : [PredicateSet.{u, p} B] := brackets.mk (PredicateSet B)
    ( el b := packed church.{p} record
        (a : S.A.El)
        (to : (S.i $ a) =B= b) )
    ( ok b1 b2 to12 (xa,xto) := el.mk b2
        ( a := xa )
        ( to := .Trans B (S.i $ a1) b1 b2 xto to12 )

--
def isSection.{u, p} (B : Poset.Ob.{u, p}) (S : SubsetType.{u, p} B)
        (f : [B ⥤ S.A]) : Prop.{p} :=
    (Poset.Mul.onEl B S.A B S.i f) =B= (Poset.Id B)

--
def Forall.{u, p} (B : Poset.Ob.{u, p}) (P : [PredicateSet.{u, p} B]) : Prop.{p} :=
    ∀ (b : [B]) → (P $ b.el)

--
def sec2all.{u, p} (B : Poset.Ob.{u, p}) (P : [PredicateSet.{u, p} B])
        (f : [B ⥤ SmallSigmaSet B P]) (sec : isSection B (Pred2Sub B P) f)
        : Forall.{u,p} B P :=
    ∀ (b : [B]) → ((P $/ (sec /$ b)) (.pred (f [$] b)))
