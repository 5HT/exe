/*

Minimal explanation...

1. "Records as contexts" encoding

The macro code (non-polymorphic, with fixed universe levels):

```
    def A : Type.{uA} := ...
    def B : A → Type.{uB} := ...
    def RecT : Type.{(uA, uB)} := record (a : A) (b : B a)
    def recV : RecT   := RecT.mk (a := aVal) (b := bVal a)
```

should emit the following file-system structure in OM:

```
    #A/@ := ...
    #B/@ := ...

    #RecT/ (folder)
    #RecT/@a : *{uA} :=
        #A/@
    #RecT/@b : #RecT/@a → *{uB} :=
        #B/@
    #RecT/.a : ∀(a: #RecT/@a)→ ∀(b: #RecT/@b a)→ #RecT/@a :=
        λ(a: #RecT/@a)→ λ(b: #RecT/@b a)→ a
    #RecT/.b : ∀(a: #RecT/@a)→ ∀(b: #RecT/@b a)→ #RecT/@b (#RecT/.a a b) :=
        λ(a: #RecT/@a)→ λ(b: #RecT/@b a)→ b

    #recV/ (folder)
    #recV/=a : #RecT/@a :=
        aVal
    #recV/=b : #RecT/@b #recV/=a :=
        bVal #recV/=a
```

TODO: distinct treatment for dependent and independent contexts

2. Records packed by encodings

An *encoding instance* is given by

- at type-level: mapping of universes of contexts (here `u` and `v` can be complex contexts)
    ` PACK: *{u} -> *{v} `

- at value-level: isomorphism guaranteeing seamless substitution
    ` ENCODE: ∀(R: *{u}) -> R -> PACK R `
    ` DECODE: ∀(R: *{u}) -> PACK R -> R `
- and possible coherence information (due to homotopy truncation level), for setoids:
    ` encodedOK: mul (ENCODE R) (DECODE R) = id (PACK R)`
    ` decodedOK: mul (DECODE R) (ENCODE R) = id R`

An *encoding instance* can be produced for given *encoding method* and *encoding schema*.

A (homogeneous) *encoding method* is given by (like `church` below) a unit and a multiplication:
    `UNIT : *{u}`
    `PAIR : *{(u,u)} -> *{u}`

An *encoding schema* is declared by `packed` keyword and consists
of multiple calls of encoding method for given context structure.

3. Field projections

A complex term is accompanied (at compile-time) by
a sequence of field type terms (physical representation)
and a sequence of named field projection (logical representation)
and a constructor function `mk`.
Physical representation we have seen in (1.) as multiple files in a folder.
Physical fields of top-level terms (`def` clause) and function arguments are
available by namespace notation: `Hom.El`, `Hom.Equ` etc.
Simple records have both representation coinciding, with projections just returning one of arguments.
A call of a projection is denoted here by application of dot-notation functions: `.El S`, `.Equ S` etc.
The type-checker must ensure that given complex term possesses the projection name called.
By the contract, packed records have different physical and logical representations.
The *encoding instance* declared by `packed` is a way to define the relation of the both.

*/


/*

ADDED

namespaces = records = modules

any `def` in a namespace is a record field


the shortcut syntax module `def`:


```
module1
(...)
( my := new record ( fA : tA := vA ) (fB : tB := vB) )
(...)
```

is a sugar for a record value of an anonymous type


```
( module1 : record ... ( my : record (fA : tA) (fB : tB) ) )
...
( module1 := new ... ( my := new (fA := vA) (fB := vB) ) )

```

QUESTION: where to place anonymous record types in filesystem?
??? to name it with `@` postfix or prefix

@module1 : Type := record (...)
module1 : module1

*/
