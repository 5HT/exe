--
-- simplified macro framework generating inductive types 
--
_________________________________

def Equ (T : *) : T -> T -> Prop := @macro -- built-in type (?)

def AlgHom (AlgOb : * -> *) : *2 :=
    \/(T1 : *) -> \/(algebraT1 : AlgOb T1) -> 
    \/(T2 : *) -> \/(algebraT2 : AlgOb T2) -> 
    (T1 -> T2) -> *
def AlgWeakFunctor (AlgOb : * -> *) (AlgMor : AlgHom AlgOb) : * 
    := record ???
def AlgFunctor (AlgOb : * -> *) (AlgMor : AlgHom AlgOb) : * 
    := record extends (AlgWeakFunctor AlgOb AlgMor) ???

_________________________________

def _WeakInitialAlgClass 
    (AlgOb : * -> *) 
    (AlgMor : AlgHom AlgOb)
    (Carrier : *) 
    : * 
:= record extends (algebra : AlgOb Carrier)
    (recursor : \/(T : *) -> \/(algebraT : AlgOb T) -> (Carrier -> T))
    (recursorOk : \/(T : *) -> \/(algebraT : AlgOb T) -> AlgMor Carrier algebra T algebraT recursor)

 def _InitialAlgClass 
    (AlgOb : * -> *) 
    (AlgMor : AlgHom AlgOb)
    (Carrier : *) 
    : * 
:= record extends (_WeakInitialAlgClass Struct Carrier) 
    (naturality : 
        \/(T1 : *) -> \/(algebraT1 : AlgOb T1) -> 
        \/(T2 : *) -> \/(algebraT2 : AlgOb T2) -> 
        Equ (Carrier -> T2) (Mul Carrier T1 T2 mor (recursor T1 algebraT1)) (recursor T2 algebraT2))
    (uniqueness : Equ (Carrier -> Carrier) (Id Carrier) (recursor Carrier algebra)) 

def _InitialAlg 
    (AlgOb : * -> *) 
    (AlgMor : AlgHom AlgOb)
    : * 
:= record
    (lim : \/(Carrier : *)-> \/(algebra : AlgOb Carrier)-> Carrier)
    (limOk : 
        \/(T1 : *) -> \/(algebraT1 : AlgOb T1) -> 
        \/(T2 : *) -> \/(algebraT2 : AlgOb T2) -> 
        \/(m : T1 -> T2) -> \/(mOk : AlgMor T1 algebraT1 T2 algebraT2 recursor) ->
        Equ T2 (m (lim T1)) (lim T2))

def _instance_Alg
    (AlgOb : * -> *) 
    (AlgMor : AlgHom AlgOb)
    (AlgWeakFunctor : AlgWeakFunctor AlgOb AlgMor)
    : AlgOb (_InitialAlg AlgOb AlgMor)
:=  TODO

def _instance_WeakInitial 
    (AlgOb : * -> *) 
    (AlgMor : AlgHom AlgOb)
    (AlgWeakFunctor : AlgWeakFunctor AlgOb AlgMor)
    : _WeakInitialAlgClass AlgOb AlgMor (_InitialAlg AlgOb AlgMor)
:= _WeakInitialAlgClass.mk (_instance_Alg AlgOb AlgMor AlgWeakFunctor)
    /- recursor -/ TODO
    /- recursorOk -/ TODO

def _instance_Initial 
    (AlgOb : * -> *) 
    (AlgMor : AlgHom AlgOb)
    (AlgFunctor : AlgFunctor AlgOb AlgMor)
    : _InitialAlgClass AlgOb AlgMor (_InitialAlg AlgOb AlgMor AlgFunctor)
:= _InitialAlgClass.mk (_instance_WeakInitial AlgOb AlgMor AlgFunctor)
    /- naturality -/ TODO
    /- uniqueness -/ TODO

_________________________________

def MacroAlgMor (AlgOb : * -> *) : AlgHom AlgOb := @macro
def MacroAlgWeakFunctor (AlgOb : * -> *) : AlgWeakFunctor AlgOb (MacroAlgMor AlgOb) := @macro
def MacroAlgFunctor (AlgOb : * -> *) : AlgFunctor AlgOb (MacroAlgMor AlgOb) := @macro

def WeakInitialAlgClass (AlgOb : * -> *) : (* -> *)
    := _WeakInitialAlgClass AlgOb (MacroAlgMor AlgOb)
def InitialAlgClass (AlgOb : * -> *) : (* -> *)
    := _InitialAlgClass AlgOb (MacroAlgMor AlgOb)
def InitialAlg (AlgOb : * -> *) :
    := _InitialAlg AlgOb (MacroAlgMor AlgOb)
def instance_Alg (AlgOb : * -> *) 
    := _instance_Alg AlgOb (MacroAlgMor AlgOb) (MacroAlgWeakFunctor)
def instance_WeakInitial (AlgOb : * -> *) 
    := _instance_WeakInitial AlgOb (MacroAlgMor AlgOb) (MacroAlgWeakFunctor)
def instance_Initial (AlgOb : * -> *) 
    := _instance_Initial AlgOb (MacroAlgMor AlgOb) (MacroAlgFunctor)

_________________________________


def ListConstruct (Item : *) (List : *) : * := record
    (Nil : List)
    (Cons : Item -> List -> List)

def List (Item : *) : * := InitialAlg (ListConstruct Item)
def instance_List : ListConstruct Item (List Item) := instance_Alg (ListConstruct Item)
def instance_InitialList : InitialAlgClass (ListConstruct Item) (List Item) := instance_Initial (ListConstruct Item)

_________________________________

def ListRichClass (Item : *) (L : *) : * := record
    extends WeakInitialAlgClass (ListConstruct Item) L
    (filter : List -> (Item -> Bool) -> List)
    (isEmpty : List -> Bool)
    (map : ??? )
