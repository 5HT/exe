MiniCats := new record

0Rel := new record

    -- relations between types
    ( 1El := Type )

    -- notion of relation between types
    ( 1To.0El (El1, El2 : 1El) : Type :=
        ∀ (el1 : El1) → ∀ (el2 : El2) → Prop )

    -- shortcuts
    ( 1Endo (El0 : 1El) := 1To El0 El0 )

    -- implication between relations
    def 1To.0To (El1, El2 : 1El) : 1Endo.0El (1To.0El El1 El2)
    def 1To.0To El1 El2 A12 B12 :=
        ∀ (el1 : El1) → ∀ (el2 : El2) → (A12 el1 el2 → B12 el1 el2)

    -- multiplication of relations
    def 1Mul (El1, El3 : 1El)
        : record (El2 : 1El) (R12 : 1To.0El El1 El2) (R23 : 1To.0El El2 El3)
        → 1To.0El El1 El3
    def 1Mul El1 El3 (El2, R12, R23) el1 el3 := record
        ( el2 : El2 )
        ( r12 : R12 el1 el2 )
        ( r23 : R23 el2 el3 )

    def To.Endo (El1, El2 : El) (el0 : To.El El1 El2) := To.To El1 El2 el0 el0


end 0Rel

-- 0-minicat
def 0Cat.Ob : Type := record
    ( 0El : 0Rel.El )
    ( 0To : 0Rel.Endo.El El ) -- El -> El
    ( 0ToOk : 0Rel.Endo.Endo El To := 0Rel.To.Id To )
    ( 0Mul : 0Rel.To.To (0Rel.Mul El El El To To) To ) -- (To * To => To)

-- 0-groupoid
def 0Grp.Ob


end MiniCats
