--
-- minimal macross example
--


-- universes
def Type.{t} : *.{t+1} := *.{t}
def Prop.{p} : *.{p+1} := *.{p}

-- church encoding for Prop

namespace Prop

    -- Prod0 = True; Prod2 = And;

    def Prod0.{p} : Prop.{p} :=
        ∀ (True : Prop.{p}) →
        ∀ (Mk : True) →
        True

    def Prod0.Mk.{p} : Prod0.{p} :=
        λ (True : Prop.{p}) →
        λ (Mk : True) →
        Mk

    def Prop0.elim.{p} (True : Prop.{p}) (Mk : True) (true : Prod0.{p}) : True :=
        true True Mk

    def Prod2.{p} (A, B : Prop.{p}) : Prop.{p} :=
        ∀ (And : Prop.{p}) →
        ∀ (Mk : A → B → And) →
        And

    def Prod2.Mk.{p} (A, B : Prop.{p})
        (a : A) (b : B) : Prod2.{p} A B :=
        λ (And : Prop.{p}) →
        λ (Mk : A → B → And) →
        Mk a b

    def Prop2.elim.{p} (A, B : Prop.{p}) (And : Prop.{p})
        (Mk : A → B → And) (and : Prod2.{p} A B) : And :=
        and And Mk

    -- aka DEP.AND
    def Sigma.{p} (A : Prop.{p}) (B : A → Prop.{p})
        : Prop.{p} :=
        ∀ (P : Prop.{p}) →
        ∀ (Mk : ∀ (a : A) → ∀ (b : B a) → P) →
        P

    def Sigma.Mk.{p} (A : Prop.{p}) (B : A → Prop.{p})
        (a : A) (b : B a) : Sigma.{p} A B :=
        λ (P : Prop.{p}) →
        λ (Mk : ∀ (a : A) → ∀ (b : B a) → P) →
        Mk a b

    def Sigma.pr1 (A : Prop.{p}) (B : A → Prop.{p})
        (s : Sigma A B) : A :=
        s A (λ (a : A) → λ (b : B a) → a)

    def Sigma.pr2 (A : Prop.{p}) (B : A → Prop.{p})
        (B.Cong : ∀ (a1, a2 : A) → (B a1 → B a2))
        (s : Sigma A B) : B (Sigma.pr1 s) :=
        s (B (Sigma.pr1 s)) (λ (a : A) → λ (b : B a) → B.cong a (Sigma.pr1 s) b)

    def Sigma.induc (A : Prop.{p}) (B : A → Prop.{p})
        (s : Sigma A B)
        (P : Sigma A B → Prop.{p})
        (P.cong : ∀ (s1, s2 : Sigma A B) → (P s1 → P s2))
        (mk : ∀ (a : A) → ∀ (b : B a) → P (Sigma.Mk a b))
        : P s :=
        s (P s) (λ (a : A) → λ (b : B a) → P.cong (Sigma.Mk a b) s (mk a b))

    def church.{p} : encoding.{p} :=
        encoding.mk Prod0.{p} Prod0.Mk.{p} Prod2.{p} Prod2.Mk.{p} Prod2.elim.{p}

end Prop

namespace Setoid

    def Ob.{u, p} : Type.{((u+1,p+1),p+1,p,p,p)} := record
        (El : Type.{(u,p)})
        (Equ :
            ∀(e1, e2 : El) → Prop.{p})
        (Cong :
            ∀(a.1, b.1 : El.1) →
            ∀(a.21, a.22 : El.2 a.1) →
            ∀(b.21, b.22 : El.2 b.1) →
            Equ (a.1, a.21) (b.1, b.21) →
            Equ (a.1, a.22) (b.1, b.22))
        (Refl :
            ∀(e0 : El) →
            Equ e0 e0)
        (Trans :
            ∀(e1, e2, e3 : El) →
            Equ e1 e2 → Equ e2 e3 → Equ e1 e3)
        (Sym :
            ∀(e1, e2 : El) →
            Equ e1 e2 → Equ e2 e1)

--  sugar ( [A] ), (a1 ≡A≡ a2)

    def Hom.{u1, p1, u2, p2} (A : Ob.{u1, p1}) (B : Ob.{u2, p2})
        : Ob.{u2, p2} := Ob.mk
        ( El := pack (1 := onEl.1) (2 := church onEl.2 onEqu)
            record
            (onEl : [A] → [B])
            (onEl :
                ∀(a.1 : A.1) → ∀(a.21, a.22 : A.2 a.1) →
                ((onEl (a.1,a.21)) ≡B≡ (onEl (a.1,a.22))))
            (onEqu : ∀(a1, a2 : [A]) → (a1 ≡A≡ a2) → ((onEl a1) ≡B≡ (onEl a2))))
        ( Equ := λ(f, g : El) → ∀(a : A) → ((.onEl f a) ≡B≡ (.on El g a)))
        ( Equ.Cong := λ ... → B.Equ.Cong ? )
        ( Refl :=
            λ(f0 : El) →
            λ(a : [A]) → (.Refl B (.onEl f0 a)))
        ( Trans :=
            λ(f1, f2, f3 : El) →
            λ(equ12 : Equ f1 f2) → λ(equ23 : Equ f2 f3) →
            λ(a : [A]) → .Trans B (.onEl f1 a) (.onEl f2 a) (.onEl f3 a) (equ12 a) (equ23 a))
        ( Sym :=
            λ(f1, f2 : El) → λ(equ12 : Equ f1 f2) →
            λ(a : [A]) → .Sym B (.onEl f1 a) (.onEl f2 a) (equ12 a))

--  sugar (A ⥤ B), (f $ x), (f $/ xEqu), (fEqu /$ x)

    def Id.{u1, p1} (A : Ob.{u1, p1}) : [A ⥤ A] :=
        Hom.El.mk.{u1, p1, u1, p1} A A
            ( onEl := λ (a : [A]) → a )
            ( onEqu := λ (a1, a2 : [A]) → λ(equ12 : a1 ≡A≡ a2) → a12 )

    def Mul.onEl.{u1, p1, u2, p2, u3, p3} (A : Ob.{u1, p1}) (B : Ob.{u2, p2}) (C : Ob.{u3, p3})
        (f : [B ⥤ C]) (g : [A ⥤ B]) : [A ⥤ C] :=
        Hom.El.mk.{u1, p1, u3, p3} A C
            ( onEl := λ (a : [A]) → (f $ (g $ a)) )
            ( onEqu := λ (a1, a2 : [A]) → λ(equ12 : a1 ≡A≡ a2) → (f $/ (g $/ equ12)) )

end Setoid

--
def PropSet.{p} : Setoid.Ob.{p, p} := Setoid.Ob.mk.{p, p}
    (El := packed (1 := P) (2 := church) record (P: Prop.{p}) )
    (Equ := λ (e1, e2 : El) →
        let (P1 : Prop := .P e1) (P2 : Prop := .P e2) in
        packed church -- shortcut
        record
            (forward: P1 → P2)
            (backward: P2 → P1)
        -- should emit `Equ.mk` symbol )
    (Equ.Cong := λ ... → Prop.id ?)
    (Refl := λ (e0 : El) →
        let (P0 : Prop := .P e0) (f00 : P0 → P0 := Prop.id P0) in
        Equ.mk e0 e0 f00 f00 )
    (Trans := λ (e1, e2, e3 : El) →
        λ (equ12 : Equ e1 e2) → λ (equ23 : Equ e2 e3) →
        let (P1 : Prop := .P e1) (P2 : Prop := .P e2) (P2 : Prop := .P e2) in
        let (f12 : P1 → P2 := .forward equ12) (f21 : P2 → P1 := .backward equ12) in
        let (f23 : P2 → P3 := .forward equ23) (f32 : P3 → P2 := .backward equ23) in
        let (f13 : P1 → P3 := Prop.mul P1 P2 P3 f23 f12) in
        let (f31 : P3 → P1 := Prop.mul P3 P2 P1 f21 f32) in
        Equ.mk e1 e3 f13 f31 )
    (Sym := λ (e1, e2 : El) →
        λ (equ12 : Equ e1 e2) →
        let (P1 : Prop := .P e1) (P2 : Prop := .P e2) in
        let (f12 : P1 → P2 := .forward equ12) (f21 : P2 → P1 := .backward equ12) in
        Equ.mk e2 e1 f21 f12 )

--
def PredicateSet.{u, p} (X : Setoid.Ob.{u, p}) : Setoid.Ob.{p, p} :=
    X ⥤ PropSet.{p};

--
def SmallSigmaSet.{u, p} (B : Setoid.Ob.{u, p}) (P : [PredicateSet.{u, p} B]) : Setoid.Ob.{u, p} :=
    Setoid.Ob.mk.{u, p}
    ( El :=
        packed (1 := base.1) (2 := church base.2 pred)
        record
            (base : [B])
            (pred : P $ base) )
    ( Equ := λ (e1, e2 : El) →
        let (b1 : [B] := .base e1) (b2 : [B] := .base e2) in
        (b1 ≡A≡ b2) )
    ( Equ.Cong := λ ... → Prop.id ? )
    ( Refl := λ (e0 : El) →
        let (b0 : [B] := .base e0) in
        .Refl B b0 )
    ( Trans := λ (e1, e2, e3 : El) →
        λ (equ12 : Equ e1 e2) → λ (equ23 : Equ e2 e3) →
        let (b1 : [B] := .base e1) (b2 : [B] := .base e2) (b3 : [B] := .base e3) in
        .Trans B b1 b2 b3 equ12 equ23 )
    ( Sym := λ (e1, e2 : El) →
        λ (equ12 : Equ e1 e2) →
        let (b1 : [B] := .base e1) (b2 : [B] := .base e2) in
        .Sym B b1 b2 equ12 )

--
def SubsetType.{u, p} (B : Setoid.Ob.{u, p}) : Type.{((u+1,p+1),p+1,p,p,p),(u,p),p} :=
    record
        (A : Setoid.Ob.{u, p} )
        (i : [A ⥤ B] )
        (uniq : ∀(a1, a2 : [A]) → ((i $ a1) ≡B≡ (i $ a2)) → (a1 ≡A≡ a2) )

--
def Pred2Sub.{u, p} (B : Setoid.Ob.{u, p}) (P : [PredicateSet.{u, p} B]) : SubsetType.{u,p} B :=
    SubsetType.mk.{u,p}
        ( A := SmallSigmaSet B P )
        ( i := Setoid.Hom.El.mk A B
            ( onEl := λ (a : [A]) → (.base a) )
            ( onEqu := λ (a1, a2 : [A]) → λ (equ12 : a1 ≡A≡ a2) → equ12 ) )
        ( uniq := λ (a1, a2 : [A]) → λ (equ12 : (i $ a1) ≡B≡ (i $ a2)) → equ12 )

--
def Sub2Pred.{u, p} (B : Setoid.Ob.{u, p}) (S : SubsetType.{u, p} B) : [PredicateSet.{u, p} B] :=
    Setoid.Hom.El.mk
        ( onEl := λ (b : [B]) →
            packed church.{p} -- ???
            record
                (a : [S.A])
                (equ : (S.i $ a) ≡B≡ b) )
        ( onEqu := λ (b1 b2 : [B]) → λ (equ12 : b1 ≡B≡ b2) →
            PropSet.Equ.mk (onEl b1) (onEl b2)
                ( λ (pair : onEl b1) →
                    let (a1 := .a pair) (equ1 := .equ pair) in
                    onEl.mk b2
                        ( a := a1 ).{u, p}
                        ( equ := .Trans B (.i S a1) b1 b2 equ1 equ12) )
                ( λ (pair : onEl b2) →
                    let (a2 := .a pair) (equ2 := .equ pair) in
                    let (equ21 := .Sym B b1 b2 equ12) in
                    onEl.mk b1
                        ( a := a2 )
                        ( equ := .Trans B (.i S a2) b2 b1 equ2 equ21) ) )

--
def isSection.{u, p} (B : Setoid.Ob.{u, p}) (S : SubsetType.{u, p} B)
        (f : [B ⥤ (.A S)]) : Prop.{p} :=
    (Setoid.Mul.onEl B (.A S) B (.i S) f) ≡B≡ (Setoid.Id B)

--
def Forall.{u, p} (B : Setoid.Ob.{u, p}) (P : [PredicateSet.{u, p} B]) : Prop.{p} :=
    ∀ (b : [B]) → (P $ b)

--
def sec2all.{u, p} (B : Setoid.Ob.{u, p}) (P : [PredicateSet.{u, p} B])
        (f : [B ⥤ (.A (Pred2Sub B P))]) (sec : isSection.{u,p} B (Pred2Sub B P) f) : Forall.{u,p} B P :=
    ∀ (b : [B]) → ((.forward (P $/ (sec b))) (.pred (f $ b)))

--
