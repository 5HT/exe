
    Control := new

           (record pure (P: Type → Type) (A: Type): Type :=
                   (return: P A))

           (record functor (F: Type → Type) (A,B: Type): Type :=
                   (fmap: (A → B) → F A → F B))

           (record applicative (F: Type → Type) (A,B: Type): Type :=
                   (pure: pure F A)
                   (functor: functor F A B)
                   (ap: F (A → B) → F A → F B))

           (record monad (F: Type → Type) (A,B: Type): Type :=
                   (pure: pure F A)
                   (functor: functor F A B)
                   (join: F (F A) → F B))
