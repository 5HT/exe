
    Eff := new

    -- Simplified IO as free monad

    (data FIO: Type :=
         (read: (string → FIO) → FIO)
         (write: string → FIO → FIO)
         (rand: (nat → FIO) → FIO)
         (ex: exception → FIO → FIO)
         (stop: () → FIO))

    -- Idris-like effects handling

    (data effect (v:Type) (r:Type): Type :=
         (intro: v → r → (v → r) → effect))

  (record effect (v:Type) (r:Type): Type :=
         (values: v)
         (resource: r)
         (computation: (v → r))
         (handler: effect v r → monad effect v r))

    (data monad_eff (eff: list effect) (m: Type → Type) (a: Type): Type :=
         (intro: eff m a xs (\ (v: Type) → xs) → monad_eff xs m a))

  (record handler (e: effect) (m: Type → Type): Type :=
         (action: ∀ (r: res) (eff: e t res resk) (k: ∀ (x: t) → resk x → m a) → m a))

    (data RA: Type         := (intro: effect nat (random nat)))
    (data IO (t:Type): Type := (intro: effect t   (file t)))
    (data EX (t:Type): Type := (intro: effect ()  (exception t)))
