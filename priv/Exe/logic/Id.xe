
Id := new

(record Id (A: Type): Type :=
        (Id: A → A → Type)
        (refl (a: A): Id a a)
        (Predicate: ∀ (x,y: A) → Id x y → Type)
        (Forall (C: Predicate): ∀ (x,y: A) → ∀ (p: Id x y) → C x y p)
        (∆ (C: Predicate): ∀ (x: A) → C x x (refl x))
        (axiom-J (C: Predicate): ∆ C → Forall C)
        (computation-rule (C: Predicate) (t: ∆ C): ∀ (x: A) → (J C t x x (refl x)) '==>' (t x) ))

(record Properties (A: Type): Type :=
        (Trans (a,b,c: A) : Id a b → Id b c → Id a c :=
                            Id.axiom-J (λ a b p1 → Id b c → Id a c) (λ x p2 → p2) a ab)
        (Sym (a,b: A)     : Id a b → Id b a :=
                            Id.axiom-J (λ a b p → Id b a) Id.refl a b))

(record Subst (A: Type): Type :=
        (intro (P (a: A): Type) (a1,a2: A) : Id a1 a2 → P a1 → P a2 := Id.axiom-J (λ a1 a2 p12 → P a1 → P a2)))

(record UIP (A: Type): Type :=
        (intro (A: Type) (a,b: A) (x,y: Id a b) : Id (Id A a b) x y))

(record K (A: Type): Type :=
        (PredicateK: ∀ (a: A) → Id a a → Type)
        (ForallK (C:PredicateK): ∀ (a: A) → ∀ (p: Id a a) → C a p)
        (∆K (C: PredicateK) : ∀ (a: A) → C a (Id.refl a))
        (axiom-K (C: Predicate): ∆K C → ForallK C))

(record Respect2 (A: Type): T ype :=
        (intro (A,B: Type) (f: A → B) (a,b: A) : Id A a b → Id B (f a) (f b) :=
               Id.axiom-J (λ a b p12 → Id B (f a) (f b)) (λ x → refl B (f x)) a b))

