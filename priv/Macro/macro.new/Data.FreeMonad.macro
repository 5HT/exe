Data.FreeMonad.{u,p} (F : Functor Poset Poset) (T : Poset) :=

    -- import is just a reference to a named expression in the file-system
    let (Prop := #Prop)
        (Poset := #Poset)
        (Mini := #Mini)
    in new record

-- sugar (A1) ⟹ (A2) := Alg.Hom A1 A2
-- sugar (m1) o (m2) := Poset.Mul ....

( Alg := new record
    ( Ob : Type := record
        ( default Carrier : Poset )
        ( MkPure : T ⥤ Carrier )
        ( MkFree : (F $$ Carrier) ⥤ Carrier ) )
    ( `@` := Ob )
    ( Hom (A1, A2 : Alg) : Poset :=
        ( El := .El (A1 ⥤ A2) )
        ( To m1 m2 := record
            ( mkpure1 : (m1 o A1.MkPure.el) =(T ⥤ A2)= A2.MkPure.el )
            ( mkfree1 : (m1 o A1.MkFree.el) =((F $$ A1) ⥤ A2)= (A2.MkFree.el o (F $$/ m1)) )
            ( default equ : m1 =(A1 ⥤ A2)= m2) )
        ( Trans m1 m2 m3 mto12 mto23 := new
            ( mkpure1 := mto12.mkpure1 )
            ( mkfree1 := mto12.mkfree1 )
            ( equ := .Trans (A1 ⥤ A2) m1 m2 m3 mto12.equ mto23.equ) )
    ( Id (A : Alg) : A ⟹ A :=
        let (setid := Poset.Id A) in new
        ( el := setid.el )
        ( ok := new
            ( mkpure1 := A.MkPure.ok )
            ( mkfree1 := A.MkFree.ok )
            ( equ := setid.ok) ) )
    ( Mul (A1, A2, A3 : Alg)
        (m23 : A2 ⟹ A3) (m12 : A1 ⟹ A2) : A1 ⟹ A3 :=
            let (setmul := Poset.Mul A1 A2 A3 m23.el m12.el)
            in new
        ( el := setmul.el )
        ( ok := new
            ( mkpure1 := .Trans (T ⥤ A3)
                (m23.el o (m12.el o A1.MkPure.el))
                (m23.el o A2.MkPure.el)
                (A3.MkPure.el)
                (m23 /o// m12.ok.mkpure1)
                (m23.ok.mkpure1) )
            ( mkfree1 := .Trans3 ((F $$ A1) ⥤ A3)
                (m23.el o (m12.el o A1.MkFree.el))
                (m23.el o (A2.MkFree.el o (F $$/ m12) ))
                (A3.MkFree.el o (F $$/ m23) o (F $$/ m12))
                (A3.MkFree.el o (F $$/ (m23 o m12)))
                (m23 /o// m12.ok.mkfree1)
                (m23.ok.mkfree1 //o/ (F $$/ m12))
                (A3.MkFree.el o// (F.atMul m23 m12)) )
            ( equ := setmul.ok ) ) )

( Init : Alg := new
    ( Carrier := new
        ( El := record (onOb : ∀ (A : Alg) → A.El) )
        ( To e1 e2 := record
            (onHom : ∀ (A1, A2 : Alg) → ∀ (hom : A1 ⟹ A2) →
                ((hom.el $ (e1.onOb A1)) =A2= (e2.onOb A2))) )
        ( Trans.onHom e1 e2 e3 eto12 eto23 A1 A2 hom :=
             A2.Trans
                (hom.el $ (e1.onOb A1)) (e2.onOb A2) (e3.onOb A2)
                (eto12.onHom A1 A2 hom) (eto23.onHom A2 A2 (Alg.Id A2)) ) )
    ( MkPure := new
        ( el.onEl.onOb t A := A.MkPure.el $ t )
        ( ok.onTo.onHom t1 t2 tto12 A1 A2 hom := hom.ok.mkpure1 /$ tto12 ) )
    ( recursor (A : Alg) : Init.Carrier ⥤ A.Carrier := new
        (el.onEl u := u A)
        (ok.onTo f1 f2 fto12 := fto12.onHom A A (Alg.Id A) ) )
    ( Frec (A : Alg) := F $$/ (recursor A) )
    ( MkFree := new
        ( el.onEl.onOb ff A :=
            A.MkFree.el $ ((Frec A) $ ff) )
        ( ok.onTo.onHom ff1 ff2 ffto12 A1 A2 hom :=
            hom.ok.mkfree1 /$/ ((Frec A1) $/ ffto12) ) ) )

( Endo : Poset := Init ⟹ Init )
( IId : Endo := Alg.Id Init )

( recur := new record
    ( forOb (A : Alg) : Init ⟹ A := new
        ( el.onEl u := u A )
        ( ok := new
            ( mkpure1.onTo t1 t2 tto12 := A.MkPure.ok /$/ tto12 )
            ( mkfree1.onTo ff1 ff2 ffto12 :=
                A.MkFree.ok /$/ ((Frec A1) $/ ffto12) )
            ( equ.onTo u1 u2 uto12 := uto12.onHom A A (Alg.Id A) ) ) )
    ( forHom (A1, A2 : Alg) (hom : A1 ⟹ A2)
        :   let (mulhomrec := Alg.Mul Init A1 A2 hom (recur.forOb A1)) in
                mulhomrec =(Init ⟹ A2)= (recur.forOb A2) := new
        ( mkpure1 := mulhomrec.ok.mkpure1 )
        ( mkfree1 := mulhomrec.ok.mkfree1 )
        ( equ.onTo i1 i2 ito12 := ito12.onHom A1 A2 hom ) )
    ( forId : (recur.forOb Init) =Endo= IId := new
        ( mkpure1 := recur.forOb.ok.mkpure1 Init )
        ( mkfree1 := recur.forOb.ok.mkfree1 Init )
        ( equ.onTo.onHom a1 a2 ato12 A1 A2 hom :=
            ato12.onHom Init A2 (Alg.Mul Init A1 A2 hom (recur.forOb A1)) ) ) )
