Poset :=
    let ( Prop := #Prop ) -- import from external parsed expression
    in new record

-- type of objects of the Poset category
( Ob.{u,p} : Type := record

    -- stored fields, given by types
    ( El : Type.{u} )
    ( To (e1, e2 : El) : Prop.{p} )
    ( Trans (e1, e2, e3 : El) : To e1 e2 → To e2 e3 → To e1 e3 )

    -- evaluated fields, given by expressions
    ( Ok (el : El) := To el el )
    ( `@` := record (el : El) (ok : Ok el) -- [coercion]
        ( `==` (that : @) := To this.el that.el ) )
)

(sugar (e1) `=` (P) `=` (e2) := P.To e1 e2)

( Hom.{u1, p1, u2, p2}
        (A : Poset.{u1, p1}) (B : Poset.{u2, p2})
        : Poset.{u2, p2} := new
    ( El := record ( onEl : A.El → B.El ) (`$`:=onEl) )
    ( To f1 f2 := record
        ( onTo : ∀(a1, a2 : A) → (a1 == a2) →
                ((f1.onEl a1.el) =B= (f2.onEl a2.el)) ) )
    ( Trans.onTo f1 f2 f3 fto12 fto23 a1 a2 ato12 :=
        B.Trans (f1.onEl a1.el) (f2.onEl a1.el) (f3.onEl a2.el)
            (fto12.onTo a1 a1 a1.ok) (fto23.onTo a1 a2 ato12) ) )

( `⥤` (that:Poset) := Poset.Hom this that)
( `@` := Ob ) -- [coercion]

    -- syntax sugar for mappings
(sugar (f:Poset.Hom A B) `$` (a:A) := new
    ( el := f.el.onEl a.el ) ( ok := f.ok.onTo a a a.ok ))
(sugar (f:Poset.Hom A B) `$/` (ato12 : a1 == a2) := f.ok.onTo a1 a2 ato12 )
(sugar (fto12: f1 == f2) `/$` (a:A) := fto12.onTo a a a.ok )

( Product0 : Poset.{(),()} := new
    ( El := 1 ) -- a record with zero fields
    ( To e1 e2 := 1 )
    ( Trans e1 e2 e3 eto12 eto23 := {} ) )

( Product2.{u,p} (P1,P2 : Poset.{u,p}) : Poset.{(u,u),(p,p)} := new
    ( El := P1.El * P2.El )
    ( To {e11,e12} {e21,e22} := (e11 =P1= e21) * (e12 =P2= e22) )
    ( Trans {e11,e12} {e21,e22} {e31,e32} {eto121,eto122} {eto231,eto232} :=
        { P1.Trans e11 e21 e31 eto121 eto231 ,
          P2.Trans e12 e22 e32 eto122 eto232 } ) )

( `1` : Poset := Product0 )
( `{}` : Poset.1 := new (el := {}) (ok := {}) )
( `*` := Product2)
( `{,}` (A,B:Poset)(a:A)(b:B) : A*B := new (el := {a.el,b.el}) (ok := {a.ok,b.ok}) )

( Id.{u1, p1} (A : Poset.{u1, p1}) : A ⥤ A := new
    ( el.onEl a := a  )
    ( ok.onTo a1 a2 ato12 := ato12 ) )
( Mul.{u1, p1, u2, p2, u3, p3}
        (A : Poset.{u1, p1}) (B : Poset.{u2, p2}) (C : Poset.{u3, p3}) :
        (B ⥤ C) *P* (A ⥤ B) ⥤ (A ⥤ C) := new
    ( el.onEl.onEl {mBC,mAB} a := mBC.onEl (mAB.onEl a) )
    ( ok.onTo.onTo {mBC1,mAB1} {mBC2,mAB2} {mBCto12,mABto12} a1 a2 ato12 :=
        mBCto12 (mAB $ a1) (mAB $ a2) (mABto12.onTo a1 a2 ato12)) )

-- opposite poset
( Opp := new record
    (onOb (A : Poset) : Poset := new
        (El := A.El)
        (To e1 e2 := A.To e2 e1)
        (Trans e1 e2 e3 eto12 eto23 := A.Trans e3 e2 e1 eto23 eto12))
    (onHom (A,B : Poset) : Opp (A ⥤ B) ⥤ ((Opp A) ⥤ (Opp B)) := new
        (el.onEl f := f)
        (ok.onTo.onTo f1 f2 fto21 a1 a2 ato21 := fto21 /$/ ato21 ) ) )

( P2P (P : Prop) : Poset := new
    (El := P)
    (To e1 e2 := Prop.1)
    (Trans e1 e2 e3 eto12 eto23 := Prop.{}) )

( PropHom (A : Prop) (B : Poset) : Poset := (P2P A) ⥤ B )
