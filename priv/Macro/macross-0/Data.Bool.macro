import minimal

namespace Data
namespace Bool

def Alg.Ob : Type.{u,p} := record
    ( Carrier : Setoid.Ob.{u,p} )
    ( True : [Carrier] )
    ( False : [Carrier] )

def Alg.Hom (A1, A2 : Alg.Ob) := Setoid.Ob.mk
    ( El := record
        ( hom : [A1.Carrier ⥤ A2.Carrier] )
        ( homTrue : (hom $ A1.True) ≡A2.Carrier≡ A2.True ) )
        ( homFalse : (hom $ A1.False) ≡A2.Carrier≡ A2.False ) )
    ( Equ := λ (m1, m2 : El) →
        m1.hom ≡(A1.Carrier ⥤ A2.Carrier)≡ m2.hom )
    ( Refl := λ (m0 : El) →
        .Refl (A1.Carrier ⥤ A2.Carrier) m0.hom )
    ( Trans := λ (m1, m2, m3 : El) →
        λ (equ12 : Equ m1 m2) → λ (equ23 : Equ m2 m3) →
        .Trans (A1.Carrier ⥤ A2.Carrier) m1.hom m2.hom m3.hom equ12 equ23 )
    ( Sym := λ (m1, m2 : El) →
        λ (equ12 : Equ m1 m2) →
        .Sym (A1.Carrier ⥤ A2.Carrier) m1.hom m2.hom equ12 )

-- sugar (A1 ⟹ A2)

def Alg.Id (A : Alg.Ob) : [A ⟹ A] :=
    Alg.Hom.mk A A
        ( hom := Setoid.Id A.Carrier )
        ( homTrue := .Refl A.Carrier A.True )
        ( homFalse := .Refl A.Carrier A.False )

def Alg.Mul.onEl (A1, A2, A3 : Alg.Ob)
    (m23 : [A2 ⟹ A3]) (m12 : [A1 ⟹ A2])
    : [A1 ⟹ A3] :=
    Alg.Hom.mk A1 A3
        ( hom := Setoid.Mul.onEl A1.Carrier A2.Carrier A3.Carrier m23.hom m12.hom)
        ( homTrue := .Trans A3.Carrier
            (m23.hom $ (m12.hom $ A1.True))
            (m23.hom $ A2.True)
            (A3.True)
            (m23.hom $/ m12.homTrue)
            (m23.homTrue) )
        ( homFalse := .Trans A3.Carrier
            (m23.hom $ (m12.hom $ A1.False))
            (m23.hom $ A2.False)
            (A3.False)
            (m23.hom $/ m12.homFalse)
            (m23.homFalse) )

def Init : AlgType := AlgType.mk
    ( Carrier := Setoid.Ob.mk.{u,p}
        ( El := packed (...) record
            (atOb :
                ∀ (A : Alg.Ob) →
                A.Carrier )
            (atHom :
                ∀ (A1, A2 : Alg.Ob) → ∀ (hom : [A1 ⟹ A2]) →
                ((hom.hom $ (atOb A1)) ≡A2.Carrier≡ (atOb A2))) )
        ( Equ :=
            λ (e1, e2 : El) →
            ∀ (A : Alg.Ob) →
            ((.atOb e1 A) ≡T≡ (.atOb e2 A)) )
        ( Refl :=
            λ (e0 : El) →
            λ (A : Alg.Ob) →
            (.Refl T (.atOb e0 A)) )
        ( Trans :=
            λ (e1, e2, e3 : El) →
            λ (equ12 : Equ e1 e2) → λ (equ23 : Equ e2 e3) →
            λ (A : Alg.Ob) →
            (.Trans T (.atOb e1 A) (.atOb e2 A) (.atOb e3 A) (equ12 A) (equ23 A)) )
        ( Sym :=
            λ (e1, e2 : El) →
            λ (equ12 : Equ e1 e2) →
            λ (A : Alg.Ob) →
            (.Sym T (.atOb e1 A) (.atOb e2 A) (equ12 A)) ))
    ( True := Carrier.El.mk
        ( atOb :=
            λ (A : Alg.Ob) →
            A.True )
        ( atHom :=
            λ (A1, A2 : Alg.Ob) → λ (hom : [A1 ⟹ A2]) →
            hom.homTrue ))
    ( False := Carrier.El.mk
        ( atOb :=
            λ (A : Alg.Ob) →
            A.False )
        ( atHom :=
            λ (A1, A2 : Alg.Ob) → λ (hom : [A1 ⟹ A2]) →
            hom.homFalse ))

def recur.forOb (A : Alg.Ob) : [ Init ⟹ A ] :=
    Alg.Hom.mk Init A
        ( hom := λ (u : [Init.Carrier]) → (.atOb u A) )
        ( homTrue := .Refl A.Carrier A.True )
        ( homFalse := .Refl A.Carrier A.False )

def recur.forHom (A1, A2 : Alg.Ob) (hom : [A1 ⟹ A2])
    : (Alg.Mul.onEl Init A1 A2 hom (recur.forOb A1))
        ≡[ Init ⟹ A2 ]≡ (recur.forOb A2) :=
    λ (u : [Init.Carrier]) → (.atHom u A1 A2 hom)

def Endo : Setoid.Ob := Init ⟹ Init

def IId : [Endo] := Alg.Id Init

def recur.forId : (recur.forOb Init) ≡Endo≡ IId :=
    λ (u : [Init.Carrier]) →
    λ (A : Alg.Ob) →
    (.atHom u Init A (recur.forOb A)) u

def Predicate : Setoid.Ob.{p, p} := PredicateSet Init.Carrier

def Sigma (P : [Predicate]) (true : P $ Init.True) (false : P $ Init.False) : Alg.Ob :=
    ( Carrier := SmallSigmaSet Init.Carrier P )
    ( True := SmallSigmaSet.El.mk Init.Carrier P
        ( base := Init.True )
        ( pred := true ) )
    ( False := SmallSigmaSet.El.mk Init.Carrier P
        ( base := Init.False )
        ( pred := false ) )

def SInj (P : [Predicate]) (true : P $ Init.True) (false : P $ Init.False)
    : [ (Sigma P true false) ⟹ Init ] :=
    Alg.Hom.mk (Sigma P true false) Init
        ( hom := Pred2Sub.i Init.Carrier P )
        ( homTrue := .Refl Init.Carrier Init.True )
        ( homFalse := .Refl Init.Carrier Init.False )

def recurP.forOb (P : [Predicate]) (true : P $ Init.True) (false : P $ Init.False)
    : [ Init ⟹ (Sigma P true false) ] :=
    recur.forOb (Sigma P true false)

def recurP.forHom (P : [Predicate]) (true : P $ Init.True) (false : P $ Init.False)
    : (Alg.Mul.onEl Init (Sigma P true false) Init (SInj P true false) (recurP.forOb P true false))
        ≡Endo≡ (recur.forOb Init) :=
    recur.forHom (Sigma P true false) Init (SInj P true false)

def section (P : [Predicate]) (true : P $ Init.True) (false : P $ Init.False)
    : isSection Init.Carrier (Pred2Sub Init.Carrier P) (recur.forOb.hom (Sigma P true false)) :=
    .Trans Endo
        (Alg.Mul.onEl Init (Sigma P true false) Init (SInj P true false) (recurP.forOb P true false))
        (recur.forOb Init)
        IId
        (recurP.forHom P true false)
        recur.forId

def induc (P : [Predicate]) (true : P $ Init.True) (false : P $ Init.False)
    : Forall.{u,p} Init.Carrier P :=
    sec2all Init.Carrier P (recurP.forOb.hom P true false) (section P true false)

end Bool
end Data
