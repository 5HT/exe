( Id (A : Type) : Type := record

    -- `Id` as abstract type and its only constructor
    ( Id : A → A → Type )
    ( refl (a0 : A) : Id a0 a0 )

    -- `Id` defined as inductive type (to be encoded)
    ( Id' : A → A → Type := data (refl (a0 : A) : Id' a0 a0) )

    -- dependent eliminator for `Id`
    ( axiom-J-low-level :
        ∀ (C : ∀ (a1,a2 : A) → Id a1 a2 → Type) →
        ∀ (t : ∀ (a0 : A) → C a0 a0 (refl a0)) →
        ∀ (a1,a2 : A) → ∀ (p12 : Id a1 a2) → C a1 a2 p12 )

    -- once again, with named fragments
    ( Predicate := ∀ (a1,a2 : A) → Id a1 a2 → Type )
    ( Forall (C : Predicate) := ∀ (a1,a2 : A) → ∀ (p12 : Id a1 a2) → C a1 a2 p12 )
    ( DiagonalForall (C : Predicate) := ∀ (a0 : A) → C a0 a0 (refl a0) )
    ( axiom-J (C : Predicate) : DiagonalForall C → Forall C )

    -- definitional equality, to be implemented as reduction in typechecker
    ( J-computation (C : Predicate) (t : DiagonalForall C) :
        ∀ (a : A) → (axiom-J C t a a (refl a)) ==> (t a) )

    -- the K as modified J
    ( Predicate' := ∀ (a0 : A) → Id a0 a0 → Type )
    ( Forall' (C' : Predicate') := ∀ (a0 : A) → ∀ (p00 : Id a0 a0) → C' a0 p00 )
    ( DiagonalForall' (C' : Predicate') := ∀ (a0 : A) → C' a0 (refl a0) )
    ( axiom-K (C' : Predicate') : DiagonalForall' C' → Forall' C' )

    -- additional equivalence properties
    ( Trans (a1,a2,a3 : A) : Id a1 a2 → Id a2 a3 → Id a1 a3 :=
        axiom-J (λ a1 a2 p12 → Id a2 a3 → Id a1 a3) (λ a0 p03 → p03) a1 a2 )
    ( Sym (a1,a2 : A) : Id a1 a2 → Id a2 a1 :=
        axiom-J (λ a1 a2 p12 → Id a2 a1) refl a1 a2 )

    -- substitution in predicates
    ( subst (P (a : A) : Type) (a1, a2 : A) : Id a1 a2 → P a1 → P a2 :=
        axiom-J (λ a1 a2 p12 → P a1 → P a2) (λ a0 p0 → p0) a1 a2 )
)

( axiom-UIP (A : Type) (a1, a2 : A) (p1, p2 : Id a1 a2) : Id (Id A a1 a2) p1 p2 )

( respect (A, B : Type) (f : A → B) (a1, a2 : A) : Id A a1 a2 → Id B (f a1) (f a2) :=
    axiom-J (λ a1 a2 p12 → Id B (f a1) (f a2)) (λ a0 → refl B (f a0)) a1 a2 )
( type-Id (A, B : Type) : Id Type A B → A → B :=
    axiom-J (λ A B pAB → A → B) (λ X x → x) A B )
