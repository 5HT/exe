with (#Nat) in
PTS := new

    -- parameters of PTS (sample)
    ( S : Type := Nat )
    ( A : S → S → Type := data
        ( MkA (n : Nat) : A n (Nat.Succ n) ) )
    ( R : S → S → S → Type := data
        ( MkR (n-arg, n-res : Nat) : R n-arg n-res n-res ) )

    -- contexts are dependent snoc-lists of types
    ( Ctx : Type := data
        ( Nil : Ctx )
        ( Snoc (ctx : Ctx) {s : S} (T : TypedTerm ctx (MkStar s)) : Ctx ) )

    -- index of variable
    ( VarIndex : Ctx → Type := data
        ( ZeroVar (ctx : Ctx) : VarIndex ctx )
        ( SuccVar (ctx : Ctx) {s : S} (T : TypedTerm ctx (MkStar s))
            : VarIndex ctx → VarIndex (Snoc ctx) ) )

    -- Terms in given context
    ( PreTerm : Ctx → Type := data
        ( PreStar {ctx : Ctx} (s : S) : Term ctx )
        ( PreVar {ctx : Ctx} (var : VarIndex ctx) : PreTerm ctx )
        ( PrePi {ctx : Ctx}
            {sA : S} (A : TypedTerm ctx (Star sA))
            {sB : S} (B : TypedTerm (Snoc ctx A) (Star sB))
            {sR} (rAB : R sA sB sR)
            : PreTerm ctx (Star sR) )
        ( PreApp {ctx : Ctx}
            {sA : S} {A : TypedTerm ctx (Star sA)}
            {sB : S} {B : TypedTerm (Snoc ctx A) (Star sB)}
            {sR} {rAB : R sA sB sR}
            (pi : Mk Pi A B rAB)
            (a : TypedTerm ctx A)
            (subst-B-a : Subst B a B-a)
            : PreTerm ctx )
    )

    ( TypedTerm (ctx : Ctx) : PreTerm ctx → Type := data
        ()
        () )
