module bool where

{- Simple run-time bool module.
   Theorems are in bool_theory module. -}

data bool = false | true

neg_: bool -> bool         = split { false -> true ; true -> false }
or_:  bool -> bool -> bool = split { false->\(b:bool)->b;true->\(_:bool)->true }
and_: bool -> bool -> bool = split { false->\(b:bool)->false;true->\(b:bool)->b }

caseBool (A: U) (f t: A): bool -> A = split { false -> f ; true -> t }

equalBool: bool -> bool -> bool = split
  false -> split@ (bool -> bool) with
           false -> false
           true  -> true
  true ->  split@ (bool -> bool) with
           false -> true
           true  -> false
