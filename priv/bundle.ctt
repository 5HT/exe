{- Topology. Fiber Bundle:
   - Family, Fibrations and their Equality.

   https://groupoid.space/mltt/types/bundle/index.html
   Copyright (c) Groupoid Infinity, 2014-2018.
-}

module bundle where
import iso

-- F_B  -> E -> B -- fiber bundle (F_B,E,p,B),
-- F: B -> U      -- fiber, ex. Vector Space, Total Space, Dependent Product, Pi
-- E              -- total topological space
-- B              -- base space
-- h: F -> E      -- homeomorphism
-- p:      E -> B -- surjective projection map
-- p^-1:   B -> E -- fiber (y: B) = (x: E) * p (x) = y, inverse image
-- E=(y:B)*p^-1 y -- total space
-- p^-1 iso F     -- fiber is iso F_B
-- T. E = B * F_B -- fiber bundle called trivial if total space is a cartesian product
-- pr_1:  E ->  B -- cartesian projection

-- NOTE: there is twisted hidden structure in p
-- U = neighborhood in base B
-- fibers locally behave like a products, but could be twisted

--           h
--           |
-- p-inv (U) -> U * F
--        |   /
--    p --|  /-- pr_1
--        V /
--        U
--
-- pr_1 o h = p

-- prerequisite from equiv.ctt
fiber (E B: U) (p: E -> B) (y: B): U = (x: E) * Path B (p x) y
bundle: U = (E B: U) * (y: B) * (p: E -> B) * fiber E B p y

-- Fiber
Family    (B: U): U = B -> U
-- Fibration
Fibration (B: U): U = (X: U) * (X -> B)

-- Total Space of Fibrations or Fibred Space
total   (B: U) (F: Family B): U = Sigma B F -- total space
trivial (B: U) (F: Family B): total B F -> B = \ (x: total B F) -> x.1 -- proj_1
homeo (B E: U) (F: Family B) (p: E -> B) (y: B): fiber E B p y -> total B F = undefined

encode (B: U) (F: B -> U) (y: B) : fiber (total B F) B (trivial B F) y -> F y
  = \ (x: fiber (total B F) B (trivial B F) y) -> subst B F x.1.1 y x.2 x.1.2

decode (B: U) (F: B -> U) (y: B) : F y -> fiber (total B F) B (trivial B F) y
  = \ (x: F y) -> ((y,x),refl B y)

-- Theorem (1) Trivial Fiber Bundle (F,B*F,pr1,B) equals Dependent Family F:B->U

-- Agda Style Proof:
--
--  F y = fiber (total B F) B (trivial B F) y
--      = (z: E) * Path B z.1 y
--      = (z: B) * (k: F z) * Path B z y
--      = (x y: B) * (_: Path B x y) * (F y)
--      = (_: isContr B) * (F y)
--      = F y

lem2 (B: U) (F: B -> U) (y: B) (x: F y)
   : Path (F y) (comp (<i>F (refl B y @ i)) x []) x
   = <j> comp (<i>F ((refl B y) @ j/\i)) x [(j=1) -> <k>x]

lem3 (B: U) (F: B -> U) (y: B) (x: fiber (total B F) B (trivial B F) y)
   : Path (fiber (total B F) B (trivial B F) y) ((y,encode B F y x),refl B y) x
   = <i> ((x.2 @ -i,comp (<j> F (x.2 @ -i /\ j)) x.1.2 [(i=1) -> <_> x.1.2 ]),<j> x.2 @ -i \/ j)

-- Cubical Syntax
FiberPi (B: U) (F: B -> U) (y: B)
  : Path U (fiber (total B F) B (trivial B F) y) (F y)
  = isoPath T A f g s t where
    T: U = fiber (total B F) B (trivial B F) y
    A: U = F y
    f: T -> A = encode B F y
    g: A -> T = decode B F y
    s (x: A): Path A (f (g x)) x = lem2 B F y x
    t (x: T): Path T (g (f x)) x = lem3 B F y x

-- (2) The Sum of Fibers is Total Space
TotalFam (B E: U) (p: E -> B)
  : Path U (total B (fiber E B p)) E = undefined

-- (3) Fibrational Family is a point in Codomain
FiberFamily (B E: U) (p: E -> B) (x: E)
  : Path B (p x)
           (trivial B (fiber E B p) (comp (<i> (TotalFam B E p) @ -i) x [])) = undefined

-- (4) Family is Fibration
FamilyFibration (B: U)
  : Path U (Family B) (Fibration B) = undefined

-- not used here
lem1 (B:U) (F: B -> U) (y: B) (x: F y)
       : PathP (<i>U) (PathP (<i>F ((refl B y)@i)) x x)
                (Path (F y) (transport (<i>F((refl B y)@i)) x) x)
       = <j> PathP (<i>F ((refl B y)@j\/i))
                   (comp (<i>F ((refl B y)@j/\i)) x [(j=0)-><_>x]) x
