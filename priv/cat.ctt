{- Category Theory.
   - Precategories.
   - Rezk Completion.
   - Initial and Terminal Objects.
   Copyright (c) Groupoid Infinity, 2014-2018

   see HoTT 9.1 Categories and precategories
   see HoTT 9.9 The Rezk completion -}

module cat where
import path
import iso_sigma

-- Category is the Algebra of Hom Functions on Ob domain
cat: U = (A: U) * (A -> A -> U)

-- HoTT Definition 9.1.1. Precategory Properties
isPrecategory (C: cat): U
  = (id: (x: C.1) -> C.2 x x)
  * (c: (x y z:C.1) -> C.2 x y -> C.2 y z -> C.2 x z)
  * (homSet: (x y: C.1) -> isSet (C.2 x y))
  * (left: (x y: C.1) -> (f: C.2 x y) -> Path (C.2 x y) (c x x y (id x) f) f)
  * (right: (x y: C.1) -> (f: C.2 x y) -> Path (C.2 x y) (c x y y f (id y)) f)
  * ((x y z w: C.1) -> (f: C.2 x y) -> (g: C.2 y z) -> (h: C.2 z w) ->
    Path (C.2 x w) (c x z w (c x y z f g) h) (c x y w f (c y z w g h)))

-- type refinment: algebraic structure and its theorems
precategory: U = (C: cat) * isPrecategory C

-- Public Accessors
carrier (C: precategory): U = C.1.1
hom     (C: precategory) (a b: carrier C): U = C.1.2 a b
homSet  (C: precategory) (a b: carrier C): isSet (hom C a b) = C.2.2.2.1 a b
compose (C: precategory) (x y z: carrier C) (f: hom C x y) (g: hom C y z): hom C x z = C.2.2.1 x y z f g
path    (C: precategory) (x: carrier C): hom C x x = C.2.1 x

pathL   (C: precategory) (x y: carrier C) (f: hom C x y):
        Path (hom C x y) (compose C x x y (path C x) f) f = C.2.2.2.2.1 x y f
pathR   (C: precategory) (x y: carrier C) (f: hom C x y):
        Path (hom C x y) (compose C x y y f (path C y)) f = C.2.2.2.2.2.1 x y f
pathC   (C: precategory) (x y z w: carrier C) (f: hom C x y) (g: hom C y z) (h: hom C z w):
        Path (hom C x w) (compose C x z w (compose C x y z f g) h)
                         (compose C x y w f (compose C y z w g h)) = C.2.2.2.2.2.2 x y z w f g h

-- iso record
iso (C: precategory) (A B: carrier C): U
  = (f: hom C A B)
  * (g: hom C B A)
  * (_: Path (hom C A A) (compose C A B A f g) (path C A))
  * (   Path (hom C B B) (compose C B A B g f) (path C B))

idIso (C: precategory) (A: carrier C): iso C A A
  = (path C A, path C A, pathL C A A (path C A), pathL C A A (path C A))

-- https://arxiv.org/pdf/1303.0584.pdf
-- HoTT Definition 9.1.6. Category.
isCategory    (C: precategory): U = (A: carrier C) -> isContr ((B: carrier C) * iso C A B)
category: U = (C: precategory) * isCategory C
isInitial     (C: precategory) (bot: carrier C): U = (x: carrier C) -> isContr (hom C bot x)
isTerminal    (C: precategory) (top: carrier C): U = (x: carrier C) -> isContr (hom C x top)
initial       (C: precategory): U = (bot: carrier C) * isInitial  C bot
terminal      (C: precategory): U = (top: carrier C) * isTerminal C top
initialProp   (C: precategory) (isC: isCategory C): isProp (initial  C) = undefined
terminalProp  (C: precategory) (isC: isCategory C): isProp (terminal C) = undefined

isCCC (C: precategory): U
    = (Prod: (A B: carrier C) -> carrier C)
    * (P1: (A B: carrier C) -> hom C (Prod A B) A)
    * (P2: (A B: carrier C) -> hom C (Prod A B) B)
    * (Exp: (A B: carrier C) -> carrier C)
    * (Apply: (A B E: carrier C) -> hom C (Prod (Exp A B) A) B)
    * (Term:  terminal C)
    * unit -- TODO: Beta, Eta rules

isComm (X: precategory) (A B C D: carrier X)
       (f: hom X A B) (g: hom X C D)
       (h: hom X A C) (i: hom X B D): U
     = Path (hom X A D) (compose X A C D h g)
                        (compose X A B D f i)

opCat (P: precategory): precategory = ((Ob,Hom),id,c,HomSet,L,R,Q) where
  Ob: U = carrier P
  Hom (A B: Ob): U = hom P B A
  id (A: Ob): Hom A A = P.2.1 A
  HomSet (A B: Ob): isSet (Hom A B) = homSet P B A
  c (A B C: Ob) (f: Hom A B) (g: Hom B C): Hom A C = compose P C B A g f
  L (A B: Ob) (f: Hom A B): Path (Hom A B) (c A A B (id A) f) f = pathR P B A f
  R (A B: Ob) (f: Hom A B): Path (Hom A B) (c A B B f (id B)) f = pathL P B A f
  Q (A B C D: Ob) (f: Hom A B) (g: Hom B C) (h: Hom C D)
     : Path (Hom A D) (c A C D (c A B C f g) h)
                      (c A B D f (c B C D g h)) = <i> pathC P D C B A h g f @ -i

opPreserve (C: precategory) : Path precategory (opCat (opCat C)) C = <i> C

mono (P: precategory) (B C: carrier P) (f: hom P B C): U
  = (A: carrier P) (g1 g2: hom P A B)
 -> Path (hom P A C) (compose P A B C g1 f) (compose P A B C g2 f)
 -> Path (hom P A B) g1 g2

epi (P: precategory) (X Y: carrier P) (f: hom P X Y): U
  = (Z: carrier P) (g1 g2: hom P Y Z)
 -> Path (hom P X Z) (compose P X Y Z f g1) (compose P X Y Z f g2)
 -> Path (hom P Y Z) g1 g2

