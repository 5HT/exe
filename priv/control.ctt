module control where

import functor

data fix (F: U -> U) = Fix (point: F (fix F))

out_ (F: U -> U): fix F -> F (fix F) = split Fix f -> f
in_  (F: U -> U): F (fix F) -> fix F = \(x: F (fix F)) -> Fix x

data freeF   (F: U -> U) (A B: U)  = ReturnF (a: A) | BindF (f: F B)
data cofreeF (F: U -> U) (A B: U)  = CoBindF (a: A)         (f: F B)
data free    (F: U -> U) (A: U)    = Free    (_: fix (freeF     F A))
data cofree  (F: U -> U) (A: U)    = CoFree  (_: fix (cofreeF   F A))

unfree   (A: U) (F: U -> U): free   F A -> fix (freeF   F A) = split Free   a -> a
uncofree (A: U) (F: U -> U): cofree F A -> fix (cofreeF F A) = split CoFree a -> a

pure (F: U -> U): U = (return: (A: U) -> A -> F A) * Unit

applicative (F: U -> U): U
    = (pure_: pure F)
    * (functor_: functor F)
    * (ap: (A B: U) -> F (A -> B) -> F A -> F B)
    * Unit
