module coproduct where

import propset

T : U = Set -> Set

-- page 8

-- sfCoproduct : (A B: Set): Set = (X: Set) -> (((_:A -> X) * (B -> X)) -> X)

-- page 12
-- idfun and o serve as identity morphisms and compositions in all the categories below
-- Set category has Set as objects and Set -> Set as morphisms.
-- Set x Set category has (_:Set) * Set ("independent sigma") as objects and (_:Set) * Set) -> (_:Set) * Set) as morphisms
-- the product functor sends
--

-- Pi, not Lambda. cf. functor.churchPairT
-- polyNat: U = (X: Set) -> (X -> X) -> X -> X

-- homSet (X Y: Set): U = X -> Y

-- page 28

-- TAlg : U = (X: Set) * (X -> X)

-- THom (phi psi: TAlg): U = Unit

-- page 30

-- functorN (X: Set): Set = maybe U

data Either (a b : U)
  = Left (_ : a)
  | Right (_ : b)

