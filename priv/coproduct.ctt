module coproduct where

import proto
import propset

Set : U = (a: U) * isSet a

propUnit : isProp Unit = split
  tt -> split@((x:Unit) -> Path Unit tt x) with
        tt -> <i> tt

unitSet : Set = (Unit, propSet Unit propUnit)
setElem (S: Set): U = S.1

-- foo (S: Set) (e: setElem S): e -> e = idfun e
-- u : setElem unitSet = tt

obSet (A: Set): U = A.1
homSet (A B: Set): U = obSet A -> obSet B

-- foo : homSet unitSet unitSet = idfun Unit

-- endofunctor
T : U = (f: Set -> Set) * ((a b: Set) -> homSet a b -> homSet (f a) (f b))

-- page 8

-- sfCoproduct : (A B: Set): Set = (X: Set) -> (((_:A -> X) * (B -> X)) -> X)

-- page 12
-- idfun and o serve as identity morphisms and compositions in all the categories below
-- Set category has Set as objects and Set -> Set as morphisms.
-- Set x Set category has (_:Set) * Set ("independent sigma") as objects and (_:Set) * Set) -> (_:Set) * Set) as morphisms
-- the product functor sends

-- Pi, not Lambda. cf. functor.churchPairT
polyNat: U = (X: Set) -> homSet X X -> homSet X X

-- page 28

-- type TAlg t x = Functor t => (x, t x -> x)
TAlg (t: T): U = (X: Set) * homSet (t.1 X) X

-- From https://en.wikipedia.org/wiki/F-algebra
THom (F: T) (al be: TAlg F): U = (f: homSet A B) * Path (homSet FA B) (up f) (down f) where
  A  : Set = al.1
  B  : Set = be.1
  FA : Set = F.1 A
  FB : Set = F.1 B
  up   (f: homSet A B): homSet FA B = o FA.1  A.1 B.1 f    al.2
  down (f: homSet A B): homSet FA B = o FA.1 FB.1 B.1 be.2 Ff where
    Ff : FA.1 -> FB.1 = F.2 A B f

isTInitial (F: T) (initial: TAlg F): U = (arbitrary: TAlg F) -> THom F initial arbitrary

generalEnc (F: T): U = (a: TAlg F) * isTInitial F a

unitEnc2 : U = generalEnc F where
  -- identity functor
  F : T = (idfun Set, \(a b: Set) -> idfun (homSet a b))

-- page 20

unitEnc' : U = (X: Set) -> homSet X X

unitEnc : U
  = (al : unitEnc') * ((X Y: Set) -> (f: homSet X Y) ->
    Path (homSet X Y) (o X.1 X.1 Y.1 f (al X)) (o X.1 Y.1 Y.1 (al Y) f))

-- page 21

-- lemma 2.4.2 (i)
unitEncStar : unitEnc = (\(X: Set) -> idfun X.1, (\(X Y: Set) -> refl (homSet X Y)))

-- lemma 2.4.2 (ii)
unitEncRec (C: Set) (c: C.1): unitEnc -> C.1
  = \(z: unitEnc) -> z.1 C c

-- lemma 2.4.3
unitEncBeta (C: Set) (c: C.1): Path C.1 (unitEncRec C c unitEncStar) c = refl C.1 c

-- TODO: lemma 2.4.4

-- page 30

-- functorN (X: Set): Set = maybe U

data Either (a b : U)
  = Left (_ : a)
  | Right (_ : b)

