module dagand where

import control
import nat

-- Inductive Types
data Type
    = ivar
    | ione
    | isigma (S: U) (T: S -> Type)
    | ipi (S: U) (T: S -> Type)

-- Inductive Families indexed by I
data Family (I: U)
    = var (i: I)
    | one
    | sum (n: nat) (T: Fin (just n) -> Family I) -- data constructors have Fin naming
    | sigma (S: U) (T: S -> Family I)
    | pi (S: U) (T: S -> Family I)

-- Logic
Pow (I: U): U = I -> U
Imply (I: U) (P Q: Pow I): U = (i: I) -> P i -> Q i

-- Interpret Inductive Type
ii (X: U): Type -> U = split
    ivar -> X
    ione -> Unit
    isigma S T -> (s: S) *  ii X (T s)
    ipi S T -> (s: S) -> ii X (T s)

-- Canonical Lifting
ilift (X: U) (P: Pow X) : (D: Type) (xs: ii X D) -> U = split
    ivar -> \(xs: ii X ivar) -> P xs
    ione -> \(xs: ii X ione) -> Unit
    isigma S T -> \(xs: ii X (isigma S T)) -> ilift X P (T xs.1) xs.2
    ipi S T -> \(xs: ii X (ipi S T)) -> (s: S) -> ilift X P (T s) (xs s)

-- Interpret Inductive Family
i (I: U) (X: Pow I): Family I -> U = split
    var x -> X x
    one -> Unit
    sum n T -> (k: Fin (just n)) * i I X (T k)
    sigma S T -> (s: S) * i I X (T s)
    pi S T -> (s: S) -> i I X (T s)

-- Canonical Lifting
lift (I: U) (X: Pow I) (P: (j: I) -> X j -> U): (D: Family I) -> (xs: i I X D) -> U = split
    var x -> \(xs: i I X (var x)) -> (P x) xs
    one -> \(xs: i I X one) -> Unit
    sum n T -> \(xs: i I X (sum n T)) -> lift I X P (T xs.1) xs.2
    sigma S T -> \(xs: i I X (sigma S T)) -> lift I X P (T xs.1) xs.2
    pi S T -> \(xs: i I X (pi S T)) -> (s: S) -> lift I X P (T s) (xs s)

-- Interpret Map
imap (I: U) (X Y: Pow I) (f: Imply I X Y): (D: Family I) -> i I X D -> i I Y D = split
    var x -> \(xs: i I X (var x)) -> f x xs
    one -> \(xs: i I X one) -> tt
    sum n T -> \(xs: i I X (sum n T)) -> (xs.1, imap I X Y f (T xs.1) xs.2)
    sigma S T -> \(xs: i I X (sigma S T)) -> (xs.1, imap I X Y f (T xs.1) xs.2)
    pi S T -> \(xs: i I X (pi S T)) -> \ (s: S) -> imap I X Y f (T s) (xs s)

data func (I J: U) = mkfun (x: J -> Family I)
mkf (I: U) (x: I -> Family I): func I I = mkfun x

ifunc (I J: U) (X: Pow I): func I J -> J -> U = split
    mkfun x -> \(j: J) -> i I X (x j)

ifmap (I J: U) (X Y: Pow I) (f: Imply I X Y):
    (D: func I J) -> Imply J (ifunc I J X D) (ifunc I J Y D) = split
    mkfun x -> \(j: J) -> \(xs: i I X (x j)) -> imap I X Y f (x j) xs

data iMu (D: Type) = imu (x: ii (iMu D) D)
data Mu (I: U) (D: func I I) (i: I) = mu (_: ifunc I I (Mu I D) D i)

iDAlg (D: Type) (P: iMu D -> U) (xs: ii (iMu D) D): U = ilift (iMu D) P D xs -> P (imu xs)

-- [_]^ : (D : func I I)(P : ∀{i} → X i → Set)(xs : Σ[ i ∈ I ] ⟦ D ⟧func X i) → Set
-- [ D ]^ P (i , xs) = [ func.out D i ]^h P xs

-- liftfun (I: U) (X: Pow I):
--    (D: func I I) -> ((i: I) -> X i -> U) -> (i: I) * (ifunc I I X D i) -> U = split
--    mkfun x -> \(P: (i: I) -> X i -> U) ->
--               \(xs: (i: I) * ifunc I I X (mkf I x) i) ->
--               lift I X P (x xs.1) xs.2

