module etale where
import path
import pullback
import infinitesimal

isÉtaleMap (A B: U) (f: A -> B): U
  = isPullbackSq A L B (Im B) x y w f h where
  K: U = A
  L: U = Im A
  M: U = B
  N: U = Im B
  x:  L -> N = ImApp  A B f
  y:  B -> N = ImUnit B
  w:  A -> L = ImUnit A
  c1: A -> N = o A L N x w
  c2: A -> N = o A M N y f
  T2: U = (a:A) -> Path N (c1 a) (c2 a)
  h: T2 = undefined -- ImNaturality A B f

-- Checking: isÉtaleMap
-- Type checking failed: check conv:
-- Pi A ((\(a : A) -> Path (Im B) (ImUnit B (f a)) (ImApp A B f (ImUnit A a))) (A = A, B = B, f = f))
-- /=
-- Pi A ((\(a : A) -> Path N (c1 a) (c2 a)) (A = A, B = B, f = f))
-- >

