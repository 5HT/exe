module fun where

import cat
import prop
import set
import iso_sigma

-- Definition 9.2.1. Functor on Precategories
catfunctor (A B: precategory): U
  = (ob: carrier A -> carrier B)
  * (mor: (x y: carrier A) -> hom A x y -> hom B (ob x) (ob y))
  * (id: (x: carrier A) -> Path (hom B (ob x) (ob x)) (mor x x (path A x)) (path B (ob x)))
  * ((x y z: carrier A) -> (f: hom A x y) -> (g: hom A y z) ->
     Path (hom B (ob x) (ob z)) (mor x z (compose A x y z f g))
      (compose B (ob x) (ob y) (ob z) (mor x y f) (mor y z g)))

idFunctor (A: precategory): catfunctor A A
  = (\(x: carrier A) -> x,
     \(x y: carrier A) (h: hom A x y) -> h,
     \(x: carrier A) -> <_> path A x,
     \(x y z: carrier A) (f: hom A x y) (g: hom A y z) -> <_> compose A x y z f g)

compFunctor (A B C: precategory) (F: catfunctor A B) (G: catfunctor B C): catfunctor A C
  = (\(x: carrier A) -> G.1 (F.1 x),
     \(x y: carrier A) (h: hom A x y) -> G.2.1 (F.1 x) (F.1 y) (F.2.1 x y h),
     \(x: carrier A) -> composition (hom C (G.1 (F.1 x)) (G.1 (F.1 x)))
                            (G.2.1 (F.1 x) (F.1 x) (F.2.1 x x (path A x)))
                            (G.2.1 (F.1 x) (F.1 x) (path B (F.1 x)))
                            (path C (G.1 (F.1 x)))
                            (<i>G.2.1 (F.1 x) (F.1 x) (F.2.2.1 x @ i))
                            (G.2.2.1 (F.1 x)),
     \(x y z: carrier A) (f: hom A x y) (g: hom A y z) ->
        composition (hom C (G.1 (F.1 x)) (G.1 (F.1 z)))
            (G.2.1 (F.1 x) (F.1 z) (F.2.1 x z (compose A x y z f g)))
            (G.2.1 (F.1 x) (F.1 z) (compose B (F.1 x) (F.1 y) (F.1 z) (F.2.1 x y f) (F.2.1 y z g)))
            (compose C (G.1 (F.1 x)) (G.1 (F.1 y)) (G.1 (F.1 z))
                (G.2.1 (F.1 x) (F.1 y) (F.2.1 x y f))
                (G.2.1 (F.1 y) (F.1 z) (F.2.1 y z g)))
            (<i> G.2.1 (F.1 x) (F.1 z) (F.2.2.2 x y z f g @ i))
            (G.2.2.2 (F.1 x) (F.1 y) (F.1 z) (F.2.1 x y f) (F.2.1 y z g)))

functorId (A B : precategory) (f g : catfunctor A B)
    (p : Path ( (Fob : carrier A -> carrier B)
              * ((x y : carrier A) -> hom A x y -> hom B (Fob x) (Fob y))) (f.1, f.2.1) (g.1, g.2.1))
  : Path (catfunctor A B) f g
  = let
    T0 : U
      = (Fob : carrier A -> carrier B)
      * ((x y : carrier A) -> hom A x y -> hom B (Fob x) (Fob y))
    T1 (t : T0) : U
      = (Fid : (x : carrier A) -> Path (hom B (t.1 x) (t.1 x)) (t.2 x x (path A x)) (path B (t.1 x)))
      * ((x y z: carrier A) -> (f : hom A x y) -> (g : hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
    pT1 (t : T0): isProp (T1 t)
      = let
        T2: U = (x: carrier A) -> Path (hom B (t.1 x) (t.1 x)) (t.2 x x (path A x)) (path B (t.1 x))
        pT2: isProp T2 = propPi (carrier A) (\ (x: carrier A) -> Path (hom B (t.1 x) (t.1 x)) (t.2 x x (path A x)) (path B (t.1 x)))
              (\ (x: carrier A) -> homSet B (t.1 x) (t.1 x) (t.2 x x (path A x)) (path B (t.1 x)))
        T3: U = (x y z: carrier A) (f: hom A x y) (g: hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g))
        pT3: isProp T3
          = let
            p0 (x y z : carrier A) (f : hom A x y) (g : hom A y z) : isProp (Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
              = homSet B (t.1 x) (t.1 z) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g))
            p1 (x y z : carrier A) (f : hom A x y) : isProp ((g : hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
              = propPi (hom A y z)
                  (\ (g : hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
                  (p0 x y z f)
            p2 (x y z : carrier A) : isProp ((f : hom A x y) (g : hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
              = propPi (hom A x y)
                  (\ (f : hom A x y) -> (g : hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
                  (p1 x y z)
          in propPi3 (carrier A)
             (\ (x y z : carrier A) -> (f : hom A x y) -> (g : hom A y z) -> Path (hom B (t.1 x) (t.1 z)) (t.2 x z (compose A x y z f g)) (compose B (t.1 x) (t.1 y) (t.1 z) (t.2 x y f) (t.2 y z g)))
             p2
      in propAnd T2 T3 pT2 pT3
    p0 : Path ((t : T0) * T1 t) ((f.1, f.2.1), (f.2.2.1, f.2.2.2)) ((g.1, g.2.1), (g.2.2.1, g.2.2.2))
      = lemSig T0 T1 pT1 ((f.1, f.2.1), (f.2.2.1, f.2.2.2)) ((g.1, g.2.1), (g.2.2.1, g.2.2.2)) p
  in <i> ((p0 @ i).1.1, (p0 @ i).1.2, (p0 @ i).2.1, (p0 @ i).2.2)

cosliceCat (C D: precategory) (a: carrier C) (F: catfunctor D C): precategory
  = let
    Ob: U = (y: carrier D) * hom C a (F.1 y)
    Hom (x y: Ob) : U = (h: hom D x.1 y.1) * Path (hom C a (F.1 y.1)) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h))
    id (x: Ob) : Hom x x
      = (path D x.1, <i> comp (<_> (hom C a (F.1 x.1)))
                              (compose C a (F.1 x.1) (F.1 x.1) x.2 (F.2.2.1 x.1 @ -i))
            [ (i = 0) -> pathR C a (F.1 x.1) x.2
            , (i = 1) -> <_> compose C a (F.1 x.1) (F.1 x.1) x.2 (F.2.1 x.1 x.1 (path D x.1)) ])
    cmp (x y z: Ob) (f: Hom x y) (g: Hom y z): Hom x z
      = let
        h: hom D x.1 z.1 = compose D x.1 y.1 z.1 f.1 g.1
        p : Path (hom C a (F.1 z.1)) z.2 (compose C a (F.1 x.1) (F.1 z.1) x.2 (F.2.1 x.1 z.1 h))
          = let
            p2: Path (hom C a (F.1 z.1)) z.2
                     (compose C a (F.1 y.1) (F.1 z.1) (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 f.1)) (F.2.1 y.1 z.1 g.1))
              = <i> comp (<_> hom C a (F.1 z.1)) (g.2 @ i)
                [ (i = 0) -> <_> z.2
                , (i = 1) -> <j> compose C a (F.1 y.1) (F.1 z.1) (f.2 @ j) (F.2.1 y.1 z.1 g.1) ]
            p3 : Path (hom C a (F.1 z.1))
                   (compose C a (F.1 y.1) (F.1 z.1) (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 f.1)) (F.2.1 y.1 z.1 g.1))
                   (compose C a (F.1 x.1) (F.1 z.1) x.2 (F.2.1 x.1 z.1 (compose D x.1 y.1 z.1 f.1 g.1)))
              = <i> comp (<_> hom C a (F.1 z.1)) (pathC C a (F.1 x.1) (F.1 y.1) (F.1 z.1) x.2 (F.2.1 x.1 y.1 f.1) (F.2.1 y.1 z.1 g.1) @ i)
                [ (i = 0) -> <_> compose C a (F.1 y.1) (F.1 z.1) (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 f.1)) (F.2.1 y.1 z.1 g.1)
                , (i = 1) -> <j> compose C a (F.1 x.1) (F.1 z.1) x.2 (F.2.2.2 x.1 y.1 z.1 f.1 g.1 @ -j) ]
          in <i> comp (<_> hom C a (F.1 z.1)) (p2 @ i)
            [ (i = 0) -> <_> z.2
            , (i = 1) -> p3 ]
      in (h, p)
    HomSet (x y : Ob): isSet (Hom x y)
      = let
        p0: isSet (hom D x.1 y.1) = homSet D x.1 y.1
        p1 (h: hom D x.1 y.1) : isSet (Path (hom C a (F.1 y.1)) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h)))
          = propSet ((Path (hom C a (F.1 y.1)) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h))))
              (homSet C a (F.1 y.1) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h)))
      in setSig (hom D x.1 y.1)
      (\ (h: hom D x.1 y.1) -> Path (hom C a (F.1 y.1)) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h))) p0 p1
    homId (x y: Ob) (h0 h1: Hom x y) (p: Path (hom D x.1 y.1) h0.1 h1.1): Path (Hom x y) h0 h1
      = let
        A : U = hom D x.1 y.1
        P (h : A) : U = Path (hom C a (F.1 y.1)) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h))
        pP (h : A) : isProp (P h) = homSet C a (F.1 y.1) y.2 (compose C a (F.1 x.1) (F.1 y.1) x.2 (F.2.1 x.1 y.1 h))
      in lemSig A P pP h0 h1 p
    L (x y: Ob) (f : Hom x y) : Path (Hom x y) (cmp x x y (id x) f) f = homId x y (cmp x x y (id x) f) f (pathL D x.1 y.1 f.1)
    R (x y: Ob) (f : Hom x y) : Path (Hom x y) (cmp x y y f (id y)) f = homId x y (cmp x y y f (id y)) f (pathR D x.1 y.1 f.1)
    C (x y z w: Ob) (f: Hom x y) (g: Hom y z) (h: Hom z w): Path (Hom x w) (cmp x z w (cmp x y z f g) h) (cmp x y w f (cmp y z w g h))
       = homId x w (cmp x z w (cmp x y z f g) h) (cmp x y w f (cmp y z w g h)) (pathC D x.1 y.1 z.1 w.1 f.1 g.1 h.1)
  in ((Ob, Hom), id, cmp, HomSet, L, R, C)

-- Universal Arrow

univArr (C D: precategory)
        (a: carrier C)
        (F: catfunctor D C): U = initialObject (cosliceCat C D a F)

-- uO : D
-- η : hom(a, F(uO))
-- H: ∃! hom((u0, η), y)
-- H': hom(u0, y)
-- HP: F(uH') ∘ η = yH

uO   (C D: precategory) (F: catfunctor D C) (a: carrier C) (ua: univArr C D a F) : carrier D = ua.1.1
uEta (C D: precategory) (F: catfunctor D C) (a: carrier C) (ua: univArr C D a F) : hom C a (F.1 (uO C D F a ua)) = ua.1.2
uH   (C D: precategory) (F: catfunctor D C) (a: carrier C) (ua: univArr C D a F) (y: carrier (cosliceCat C D a F)) : isContr (hom (cosliceCat C D a F) ua.1 y) = ua.2 y
uH'  (C D: precategory) (F: catfunctor D C) (a: carrier C) (ua: univArr C D a F) (y: carrier (cosliceCat C D a F)) : hom D ua.1.1 y.1 = (ua.2 y).1.1
uHP  (C D: precategory) (F: catfunctor D C) (a: carrier C) (ua: univArr C D a F) (y: carrier (cosliceCat C D a F)) :
     Path (hom C a (F.1 y.1)) y.2
          (compose C a (F.1 ua.1.1) (F.1 y.1) (uEta C D F a ua) (F.2.1 ua.1.1 y.1 (uH' C D F a ua y))) = (ua.2 y).1.2
