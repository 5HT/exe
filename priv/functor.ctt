module functor where

import prelude
import path

functor_ (A B: U) (F: U -> U): U
    = (fmap: (A -> B) -> F A -> F B) * Unit

functor (F: U -> U): U
    = (fmap: (A B: U) -> (A -> B) -> F A -> F B)
    * (id: (A: U) -> (x: F A) -> Path (F A) (fmap A A (idfun A) x) x)
    * (compose: (A B C: U) (f: B -> C) (g: A -> B) (x: F A) ->
      Path (F C) (fmap A C (o A B C f g) x)
                 ((o (F A) (F B) (F C) (fmap B C f) (fmap A B g)) x)) * Unit

idtype (A: U): U = A
apply (A B: U) (f: A -> B) (arg: A): B = f arg

functorIdtypeId: (A: U) -> (a: A) -> Path A a a = refl
functorIdtypeComp (A B C: U) (f: B -> C) (g: A -> B) (x: A): Path C (f (g x)) (f (g x)) = refl C (f (g x))

functor_idtype : functor idtype = (apply, functorIdtypeId, functorIdtypeComp, tt)

consttype (A B: U): U = A

functor_consttype (A: U) : functor (consttype A) = (fmap, id, compose, tt) where
  fmap (B C : U) (_: B -> C) : A -> A = idfun A
  id (_ : U): (x : A) -> Path A x x = refl A
  compose (A0 B C : U) (f : B -> C) (g : A0 -> B): (x : A) -> Path A x x = refl A

functiontype (A B: U): U = A -> B

functor_functiontype (T: U): functor (functiontype T) = (fmap, id, compose, tt) where
  fmap (A B : U) (f: A -> B): (T -> A) -> (T -> B) = o T A B f
  id (A : U): (x : T -> A) -> Path (T -> A) x x = refl (T -> A)
  compose (A B C : U) (f : B -> C) (g : A -> B) (x : T -> A): Path (T -> C) (\(x0 : T) -> f (g (x x0))) (\(x0 : T) -> f (g (x x0))) = refl (T -> C) (\(x0 : T) -> f (g (x x0)))

-- type-level composition
comptype (F G: U -> U) (t: U): U = F (G t)

{-
x == y
f y == z
-------------
f x == z
-}
lemma1
  (A B: U)
  (g : A -> B)
  (x y : A)
  (z : B)

  (pxy: Path A x y)
  (pgyz: Path B (g y) z)
  : Path B (g x) z
  = composition B (g x) (g y) z (mapOnPath A B g x y pxy) pgyz

functorIdFunExt (F: U -> U) (f: functor F) (A: U) : Path (F A -> F A) (f.1 A A (idfun A)) (idfun (F A))
  = funExtNonDep (F A) (F A) (f.1 A A (idfun A)) (idfun (F A)) (f.2.1 A)

-- Functor F, Functor G => Functor (comptype F G)
functor_comptype (F G: U -> U) (f: functor F) (g: functor G) : functor (comptype F G) = (fmap, id, compose, tt) where
  T: U -> U = comptype F G
  fmapF : (A B: U) -> (A -> B) -> F A -> F B = f.1
  fmapG : (A B: U) -> (A -> B) -> G A -> G B = g.1
  idF : (A: U) -> (x: F A) -> Path (F A) (fmapF A A (idfun A) x) x = f.2.1
  idG : (A: U) -> (x: G A) -> Path (G A) (fmapG A A (idfun A) x) x = g.2.1
  fmap (A B : U) (arg: A -> B) : F (G A) -> F (G B) = fmapF (G A) (G B) (fmapG A B arg)
  id (A : U) (x : F (G A)) : Path (F (G A)) (fmapF (G A) (G A) (fmapG A A (idfun A)) x) x
    = lemma1 (G A -> G A) (F (G A)) lemma1g (fmapG A A (idfun A)) (idfun (G A)) x (functorIdFunExt G g A) (idF (G A) x)
    where lemma1g (y: G A -> G A): F (G A) = fmapF (G A) (G A) y x

  compose: (A B C: U) (f: B -> C) (g: A -> B) (x: T A) ->
    Path (T C) (fmap A C (o A B C f g) x)
               ((o (T A) (T B) (T C) (fmap B C f) (fmap A B g)) x) = undefined
