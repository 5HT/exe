module functor where

import prelude

functor_ (A B: U) (F: U -> U): U
    = (fmap: (A -> B) -> F A -> F B) * Unit

functor (F: U -> U): U
    = (fmap: (A B: U) -> (A -> B) -> F A -> F B)
    * (id: (A: U) -> (x: F A) -> Path (F A) (fmap A A (idfun A) x) x)
    * (compose: (A B C: U) (f: B -> C) (g: A -> B) (x: F A) ->
      Path (F C) (fmap A C (o A B C f g) x)
                 ((o (F A) (F B) (F C) (fmap B C f) (fmap A B g)) x)) * Unit

idtype (A: U): U = A
apply (A B: U) (f: A -> B) (arg: A): B = f arg

functorIdtypeId: (A: U) -> (a: A) -> Path A a a = refl
functorIdtypeComp (A B C: U) (f: B -> C) (g: A -> B) (x: A): Path C (f (g x)) (f (g x)) = refl C (f (g x))

functor_idtype : functor idtype = (apply, functorIdtypeId, functorIdtypeComp, tt)
