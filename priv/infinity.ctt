{- Infinity Language:
   - Syntax.
   Copyright (c) Groupoid Infinity, 2014-2018. -}
module infinity where
import list
import control
import path
import pi

name: U = list nat
data alg = z | o | v (_: name) | max (a b: alg) | min (a b: alg) | ap (a b: alg) | inv (a: alg)

mutual

data lang
   = PTS (_: pts)
   | SIGMA (_: exists)
   | ID (_: identity)
   | INDUCTION (_: ind)
   | HTS (_: hts)

data pts
   = star             (n: nat)
   | var    (x: name) (l: nat)
   | pi     (x: name) (l: nat) (d c: lang)
   | lambda (x: name) (l: nat) (d c: lang)
   | app                       (f a: lang)

data exists
   = sigma (n: name) (a b: lang)
   | pair (a b: lang)
   | fst (p: lang)
   | snd (p: lang)

data identity
   = id (t a b: lang)
   | idpair (a b: lang)
   | idelim (a b c d e: lang)

data tele (A: U)   = emp | tel (n: name) (b: A) (t: tele A)
data branch (A: U) =        br (n: name) (args: list name) (term: A)
data label (A: U)  =       lab (n: name) (t: tele A)
                   | composite (n: name) (t: tele A)
                               (dim: list name) (str: list (prod (prod name bool) lang))

data ind
   = data_  (n: name) (t: tele lang) (labels:   list (label lang))
   | case   (n: name) (t: lang)      (branches: list (branch lang))
   | ctor   (n: name)                (args:     list lang)

data hts
   = path (t a b: lang)
   | path_lam (n: name) (a: alg) (b: lang)
   | path_app (f: name) (a: lang) (p: alg)
   | comp_ (a b: lang)
   | fill_ (a b c: lang)
   | glue_ (a b c: lang)
   | glue_elem (a b: lang)
   | unglue_elem (a b: lang)

