module iso_pi where

import pi
import iso

pathPi (A:U) (B:A->U) (f g : Pi A B) : Path U (Path (Pi A B) f g) ((x:A) -> Path (B x) (f x) (g x))
  = isoPath  (Path (Pi A B) f g) ((x:A) -> Path (B x) (f x) (g x)) F G S T where
  T0 : U = Path (Pi A B) f g
  T1 : U = (x:A) -> Path (B x) (f x) (g x)
  F (p:T0) : T1 = \ (x:A) -> <i>p@i x
  G (p:T1) : T0 = <i>\ (x:A) -> p x @ i
  S (p:T1) : Path T1 (F (G p)) p = refl T1 p
  T (p:T0) : Path T0 (G (F p)) p = refl T0 p

setPi (A: U) (B: A -> U) (h: (x: A) -> isSet (B x)) (f g: Pi A B)
      (p q: Path (Pi A B) f g): Path (Path (Pi A B) f g) p q
  = <i j> \(x : A) -> (h x (f x) (g x) (<i>(p@i)x) (<i>(q@i)x)) @ i @ j

setFun' (X Y: U) (proofY: X -> isSet Y): isSet (X -> Y)
  = setPi X (\(_: X) -> Y) proofY

setFun (X Y: U) (proofY: isSet Y): isSet (X -> Y)
  = setFun' X Y (\(_: X) -> proofY)

groupoidPi (A:U) (B:A -> U) (h:(x:A) -> isGroupoid (B x)) (f g:Pi A B) : isSet (Path (Pi A B) f g) =
    subst U isSet  T  (Path (Pi A B) f g) (<i>pathPi A B f g@-i) rem1
 where
  T : U = (x:A) -> Path (B x) (f x) (g x)
  rem1 : isSet T =  setPi A (\ (x:A) -> Path (B x) (f x) (g x)) (\ (x:A) -> h x (f x) (g x))

