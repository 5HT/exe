module iso_sigma where

import sigma
import iso

-- used in grothedieck.ctt and below
pathSig (A:U) (B : A -> U) (t u : Sigma A B) :
  Path U (Path (Sigma A B) t u) ((p : Path A t.1 u.1) * PathP (<i> B (p @ i)) t.2 u.2)
  = isoPath T0 T1 f g s t where
  T0 : U = Path (Sigma A B) t u
  T1 : U = (p:Path A t.1 u.1) * PathP (<i> B (p@i)) t.2 u.2
  f (q:T0) : T1 = (<i> (q@i).1,<i> (q@i).2)
  g (z:T1) : T0 = <i>(z.1 @i,z.2 @i)
  s (z:T1) : Path T1 (f (g z)) z = refl T1 z
  t (q:T0) : Path T0 (g (f q)) q = refl T0 q

-- used in algstruct
setSig (A:U) (B: A-> U) (sA: isSet A) (sB : (x:A) -> isSet (B x)): isSet (Sigma A B) = goal where
  goal (t u : Sigma A B) : isProp (Path (Sigma A B) t u)
    = substInv U isProp (Path (Sigma A B) t u) ((p:T) * C p) rem3 rem2 where
    T : U = Path A t.1 u.1
    C (p:T) : U = PathP (<i> B (p@i)) t.2 u.2
    rem (p : T) : isProp (C p) = corSigSet A B sB t u p
    rem1 : isProp T = sA t.1 u.1
    rem2 : isProp ((p:T) * C p) = propSig T C rem1 rem
    rem3 : Path U (Path (Sigma A B) t u) ((p:T) * C p) = pathSig A B t u
