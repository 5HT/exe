module iso_univ where
import iso
import retract
import univ

elimIso (B : U) (Q : (A : U) -> (A -> B) -> (B -> A) -> U)
        (h1 : Q B (idfun B) (idfun B)) (A : U) (f : A -> B) : (g : B -> A) ->
        section A B f g -> retract A B f g -> Q A f g = rem1 A f
 where
   P (A : U) (f : A -> B) : U = (g : B -> A) -> section A B f g -> retract A B f g -> Q A f g

   rem : P B (idfun B) = \(g : B -> B) (sg : section B B (idfun B) g) (rg : retract B B (idfun B) g) ->
     substInv (B -> B) (Q B (idfun B)) g (idfun B) (<i> \(b : B) -> (sg b) @ i) h1

   rem1 (A : U) (f : A -> B) : P A f = \(g : B -> A) (sg : section A B f g) (rg : retract A B f g) ->
          elimEquiv B P rem A (f,isoToEquiv A B f g sg rg) g sg rg

elimIsIso (A : U) (Q : (B : U) -> (A -> B) -> (B -> A) -> U)
         (d : Q A (idfun A) (idfun A)) (B : U) (f : A -> B) (g : B -> A)
         (sg : section A B f g) (rg : retract A B f g) : Q B f g =
  elimIso A (\(B : U) (f : B -> A) (g : A -> B) -> Q B g f) d B g f rg sg
