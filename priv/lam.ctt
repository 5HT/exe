module lam where
import prelude
import list
import nat
import control

cata (A: U) (F: U -> U) (alg: F A -> A) (f: fix F): A
    = alg (fmap (fix F) A F (cata A F alg) (out_ F f))

ana  (A: U) (F: U -> U) (coalg: A -> F A) (a: A): fix F
    = Fix (fmap A (fix F) F (ana A F coalg) (coalg a))

hylo (A B: U) (F: U -> U) (alg: F B -> B) (coalg: A -> F A) (a: A): B
    = alg (fmap A B F (hylo A B F alg coalg) (coalg a))

para (A: U) (F: U -> U) (alg: F (tuple (fix F) A) -> A) (f: fix F): A
    = alg (fmap (fix F) (tuple (fix F) A) F (\(m: fix F) -> pair m (para A F alg m)) (out_ F f))

zygo (A B: U) (F: U -> U) (g: F A -> A) (alg: F (tuple A B) -> B) (f: fix F): B
    = snd A B (cata (tuple A B) F (\(x: F (tuple A B))
    -> pair (g(fmap (tuple A B) A F (\(y: tuple A B) -> fst A B y) x)) (alg x)) f)

prepro (A: U) (F: U -> U) (nt: F(fix F) -> F(fix F)) (alg: F A -> A) (f: fix F): A
    = alg(fmap (fix F) A F (\(x: fix F) -> prepro A F nt alg (cata (fix F) F (\(y: F(fix F))
    -> Fix (nt(y))) x)) (out_ F f))

postpro (A: U) (F: U -> U) (nt : F(fix F) -> F(fix F)) (coalg: A -> F A) (a: A): fix F
    = Fix(fmap A (fix F) F (\(x: A) -> ana (fix F) F (\(y: fix F)
    -> nt(out_ F y)) (postpro A F nt coalg x)) (coalg a))

apo (A: U) (F: U -> U) (coalg: A -> F(either (fix F) A)) (a: A): fix F
    = Fix(fmap (either (fix F) A) (fix F) F (\(x: either (fix F) A)
    -> either_ (fix F) A (fix F) (idfun (fix F)) (apo A F coalg) x) (coalg a))

cata (A: U) (F: U -> U) (alg: F A -> A) (f: fix F): A
    = (a b: U) -> alg (fmap (fix F) A F (cata A F alg) (out_ F f))

