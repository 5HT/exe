module list where

import nat
import prelude
import control
import maybe
import bool
import eq

data list (A: U) = nil
                 | cons (a: A) (as: list A)

null (A: U): list A -> bool = split
  nil -> true
  cons x xs -> false

head (A: U): list A -> maybe A = split
  nil -> nothing
  cons x xs -> just x

tail (A: U): list A -> maybe (list A) = split
  nil -> nothing
  cons x xs -> just xs

append (A: U): list A -> list A -> list A = split
  nil -> idfun (list A)
  cons x xs -> \(ys: list A) -> cons x (append A xs ys)

reverse (A: U): list A -> list A = rev nil where
  rev (acc: list A): list A -> list A = split
  nil -> acc
  cons x xs -> rev (cons x acc) xs

map (A B: U) (f: A -> B) : list A -> list B = split
  nil -> nil
  cons x xs -> cons (f x) (map A B f xs)

maybe_map (A B: U): maybe ((_: A) * list A) -> maybe ((_: A) * B) = undefined
foldr_ (A B: U) (alg: maybe ((_: A) * B) -> B) (xs: list A): B = undefined

foldr (A B: U) (f: A -> B -> B) (Z: B): list A -> B = split
  nil -> Z
  cons x xs -> f x (foldr A B f Z xs)

foldl (A B: U) (f: B -> A -> B) (Z: B): list A -> B = split
  nil -> Z
  cons x xs -> foldl A B f (f Z x) xs

switch (A: U) (a b: Unit -> list A) : bool -> list A = split
  false -> b tt
  true -> a tt

filter (A: U) (p: A -> bool) : list A -> list A = split
  nil -> nil
  cons x xs -> switch A (\(_:Unit) -> cons x (filter A p xs))
                        (\(_:Unit) -> filter A p xs) (p x)

uncons (A: U): list A -> maybe ((a: A) * (list A)) = split
  nil -> nothing
  cons x xs -> just (x,xs)

length (A: U): list A -> nat = split
  nil -> zero
  cons x xs -> add one (length A xs)

-- typeclass instances

-- Eq List Nat
-- Eq List (List Nat)

list_eq (A: eq): list A.1 -> list A.1 -> bool = split
  nil -> split@(list A.1 -> bool) with
    nil -> true
    cons b bs -> false
  cons x xs -> split@(list A.1 -> bool) with
    nil -> false
    cons a as -> or_ (A.2 a x) (list_eq A xs as)

eq_list_nat:               eq                   = (list nat,        list_eq eq_nat)
eq_list_list_nat:          eq                   = (list (list nat), list_eq eq_list_nat)
pure_list          (A: U): pure          A list = (\(x: A) -> cons x nil, tt)
functor_list     (A B: U): functor_    A B list = (map A B,         tt)
applicative_list (A B: U): applicative A B list = (pure_list A,     functor_list A B,
                                                  \(x:list (A -> B)) -> \(y:list A) -> nil, tt)

x : list (maybe nat) = (functor_list nat (maybe nat)).1 (\(x: nat) -> just zero) nil

pure_list_nat: pure nat list = (\(x: nat) -> cons one nil, tt)
y : list nat = pure_list_nat.1 one

-- tests/usage

-- let b : nat = foldr nat nat (\(x : nat) (y : nat) -> add x y) one (cons zero nil) in b
-- let a : list nat = append nat nil nil in a
-- filter nat f (cons zero (cons n1 (cons n2 (cons n3 (cons zero nil)))))

data S = O | P | C
opc : list S = cons O (cons P (cons C nil))
cpo : list S = cons C (cons P (cons O nil))

f : nat -> bool = split
  zero -> true
  suc -> false

-- theorems

funPath (A:U) (x:A) : A = x

assoc (A:U) : (xs ys zs : list A) ->
  Path (list A) (append A (append A xs ys) zs) (append A xs (append A ys zs)) = split
  nil -> \ (ys zs:list A) -> <i>append A ys zs
  cons x xs -> \ (ys zs:list A) -> <i>cons x (assoc A xs ys zs@i)

lem (A B C:U) (f:A->B) (g:B -> C) : (xs:list A) ->
  Path (list C) (map B C g (map A B f xs)) (map A C (\ (x:A) -> g (f x)) xs) = split
  nil -> <i>nil
  cons x xs -> <i>cons (g (f x)) (lem A B C f g xs@i)

lem1 (A:U) : (xs:list A) -> Path (list A) (map A A (funPath A) xs) xs = split
  nil -> <i>nil
  cons x xs -> <i>cons x (lem1 A xs@i)

lem2 (A:U) : (xs:list A) -> Path (list A) (append A xs nil) xs = split
  nil -> <i>nil
  cons x xs -> <i>cons x (lem2 A xs@i)
