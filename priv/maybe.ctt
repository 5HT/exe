module maybe where

import functor

data maybe (A: U) = nothing | just (a: A)

maybeElim (A B: U) (n: B) (j: A -> B) : maybe A -> B = split
  nothing -> n
  just a -> j a

-- usage
-- maybeElim nat nat zero (\ (x: nat) -> x) (just zero)

maybeMap (A B: U) (f: A -> B) : maybe A -> maybe B = split
  nothing -> nothing
  just x -> just (f x)

maybeId (A: U): maybe A -> maybe A = maybeMap A A (idfun A)
maybeRefl (A : U) (a : maybe A) : Path (maybe A) a a = refl (maybe A) a

reflNothing (A: U): Path (maybe A) nothing nothing = maybeRefl A nothing
reflJust (A: U) (x: A): Path (maybe A) (just x) (just x) = maybeRefl A (just x)

-- law of maybeElim
-- maybe_ nothing just a == a
maybeIsElim (A: U): (a: maybe A) -> Path (maybe A) a (maybeElim A (maybe A) nothing (\(a:A) -> just a) a) = split
  nothing -> reflNothing A
  just x -> reflJust A x
