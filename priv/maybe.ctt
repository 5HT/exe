module maybe where

import prelude
import control

data maybe (A: U) = nothing
                  | just (a: A)

maybe_ (A B: U) (n: B) (j: A -> B) : maybe A -> B = split
    nothing -> n
    just a -> j a

-- usage
-- maybe_ nat nat zero (\ (x: nat) -> x) (just zero)

xjust (A: U) (a: A) : maybe A = just a
foo (A: U) : (maybe A) -> maybe A = maybe_ A (maybe A) nothing (xjust A)

maybeMap (A B: U) (f: A -> B) : maybe A -> maybe B = split
  nothing -> nothing
  just x -> just (f x)

maybeId (A: U): maybe A -> maybe A = maybeMap A A (idfun A)
maybeRefl (A : U) (a : maybe A) : Path (maybe A) a a = refl (maybe A) a

reflOnNothing (A: U): Path (maybe A) nothing nothing = maybeRefl A nothing
reflOnJust (A: U) (x: A): Path (maybe A) (just x) (just x) = maybeRefl A (just x)

maybeConstrDestr (A: U): (a: maybe A) -> Path (maybe A) a (foo A a) = split
  nothing -> reflOnNothing A
  just x -> reflOnJust A x

quux (A: U): (a: maybe A) -> Path (maybe A) (maybeId A a) a = split
   nothing -> reflOnNothing A
   just x -> reflOnJust A x

aaa (A B: U) (P: maybe A -> B): maybe A -> B = split
  nothing -> P nothing
  just x -> P (just x)

-- maybeInd (A: U) (pp: (P: maybe A -> maybe A) -> Path (maybe A) nothing (P nothing)) = undefined
-- bbb (A: U) (P: maybe A -> maybe A) (n: Path (maybe A) nothing (P nothing)): Unit = undefined
-- (j: (x: A) -> Path (maybe A) (just x) (P (just x)) (a: maybe A) : Path (maybe A) a (P a) = undefined
-- maybeInd (A B: U) (P: B) (n: P nothing)

instance_3 (A B C: U) (f: B -> C) (g: A -> B): (x: maybe A) ->
            Path (maybe C) (maybeMap A C (o A B C f g) x)
                 ((o (maybe A) (maybe B) (maybe C) (maybeMap B C f) (maybeMap A B g)) x)
  = let
    aa : maybe A -> maybe C = maybeMap A C (o A B C f g)
    bb : maybe A -> maybe C =  o (maybe A) (maybe B) (maybe C) (maybeMap B C f) (maybeMap A B g)
    goal: (a : maybe A) -> Path (maybe C) (aa a) (bb a) = split
      nothing -> refl (maybe C) (aa nothing)
      just x -> refl (maybe C) (aa (just x))
  in goal

functor_maybe: functor_ maybe = (maybeMap, quux, instance_3, tt)
