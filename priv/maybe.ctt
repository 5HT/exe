module maybe where

import prelude
import control

data maybe (A: U)
    = nothing
    | just (a: A)

maybe_ (A B: U) (n: B) (j: A -> B) : maybe A -> B = split
  nothing -> n
  just a -> j a

-- usage
-- maybe_ nat nat zero (\ (x: nat) -> x) (just zero)

maybeMap (A B: U) (f: A -> B) : maybe A -> maybe B = split
  nothing -> nothing
  just x -> just (f x)

maybeId (A: U): maybe A -> maybe A = maybeMap A A (idfun A)
maybeRefl (A : U) (a : maybe A) : Path (maybe A) a a = refl (maybe A) a

reflNothing (A: U): Path (maybe A) nothing nothing = maybeRefl A nothing
reflJust (A: U) (x: A): Path (maybe A) (just x) (just x) = maybeRefl A (just x)

-- law of maybe_
-- maybe_ nothing just a == a
maybeIsElim (A: U): (a: maybe A) -> Path (maybe A) a (maybe_ A (maybe A) nothing (\(a:A) -> just a) a) = split
  nothing -> reflNothing A
  just x -> reflJust A x

-- maybeMap idfun a == a
functorMaybeId (A: U): (a: maybe A) -> Path (maybe A) (maybeId A a) a = split
   nothing -> reflNothing A
   just x -> reflJust A x

-- maybeMap id == id
functorMaybeIdFunExt (A: U): Path (maybe A -> maybe A) (maybeId A) (idfun (maybe A))
  = funExtNonDep (maybe A) (maybe A) (maybeId A) (idfun (maybe A)) (functorMaybeId A)

-- maybeInd (A: U) (pp: (P: maybe A -> maybe A) -> Path (maybe A) nothing (P nothing)) = undefined
-- bbb (A: U) (P: maybe A -> maybe A) (n: Path (maybe A) nothing (P nothing)): Unit = undefined
-- (j: (x: A) -> Path (maybe A) (just x) (P (just x)) (a: maybe A) : Path (maybe A) a (P a) = undefined
-- maybeInd (A B: U) (P: B) (n: P nothing)

functorMaybeComp (A B C: U) (f: B -> C) (g: A -> B): (x: maybe A) ->
            Path (maybe C) (maybeMap A C (o A B C f g) x)
                 ((o (maybe A) (maybe B) (maybe C) (maybeMap B C f) (maybeMap A B g)) x)
  = let
    aa : maybe A -> maybe C = maybeMap A C (o A B C f g)
    bb : maybe A -> maybe C =  o (maybe A) (maybe B) (maybe C) (maybeMap B C f) (maybeMap A B g)
    goal: (a : maybe A) -> Path (maybe C) (aa a) (bb a) = split
      nothing -> maybeRefl C (aa nothing)
      just x -> maybeRefl C (aa (just x))
  in goal

functor_maybe: functor maybe = (maybeMap, functorMaybeId, functorMaybeComp, tt)

data Ordering = LT | EQ | GT

maybeCompare (A: U) (elemCompare : A -> A -> Ordering): maybe A -> maybe A -> Ordering = split
  nothing -> split@ maybe A -> Ordering with
    nothing -> EQ
    just x -> LT
  just x -> split@ maybe A -> Ordering with
    nothing -> GT
    just y -> elemCompare x y

maybeCompareRefl
  (A: U)
  (elemCompare : A -> A -> Ordering)
  (foo: (a: A) -> Path Ordering (elemCompare a a) EQ)
  (x: maybe A)
  : Path Ordering (maybeCompare A elemCompare x x) EQ
  = undefined

maybeCompareRespectsPath
  (A: U)
  (elemCompare: A -> A -> Ordering)
  (elemCompareRespectsPath: (a b: A) -> Path A a b -> Path Ordering (elemCompare a b) EQ)
  (a b: maybe A)
  (foo: Path (maybe A) a b)
  : Path Ordering (maybeCompare A elemCompare a b) EQ
  = undefined
