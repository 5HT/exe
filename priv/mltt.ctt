{- MLTT model:
   - Pi;
   - Sigma;
   - Equ.
   Copyright (c) Groupoid Infinity, 2014-2018.
-}

module mltt where

data Unit = tt

Pi (A:U)(P:A->U):U=(x:A)->P(x)
lambda (A : U) (B: A -> U) (a : A) (b: B a): A -> B a = \(x: A) -> b
app (A : U) (B: A -> U) (a : A) (f: A -> B a): B a = f a

Sigma (A : U) (B : A -> U) : U = (x : A) * B x
pair (A : U) (B: A -> U) (a : A) (b: B a): Sigma A B = (a,b)
pr1 (A: U) (B: A -> U) (x: Sigma A B): A = x.1
pr2 (A: U) (B: A -> U) (x: Sigma A B): B (pr1 A B x) = x.2

Path (A: U) (a b: A): U = PathP (<i>A) a b
HeteroEqu (A B: U) (a: A) (b: B) (P: Path U A B) : U = PathP P a b

Equ       (A: U) (x y: A): U = HeteroEqu A A x y (<i>A)
reflect   (A: U) (a: A): Equ A a a = <i> a
D         (A: U) : U = (x y: A) -> Equ A x y -> U
singl     (A: U) (a: A): U = (x : A) * Equ A a x
cong    (A B: U) (f: A->B) (a b: A) (p: Equ A a b): Equ B (f a) (f b) = <i> f (p @ i)
eta       (A: U) (a: A): singl A a = (a,reflect A a)
contr     (A: U) (a b: A) (p: Equ A a b): Equ (singl A a) (eta A a) (b,p) = <i> (p@i,<j>p@i/\j)
subst     (A: U) (P: A->U) (a b: A) (p: Equ A a b) (e: P a): P b = transport (cong A U P a b p) e

-- HoTT Definition. J.
J         (A: U) (x: A) (C: D A) (d: C x x (reflect A x))
          (y: A) (p: Equ A x y): C x y p = subst (singl A x) T (x, reflect A x) (y, p)
                                                 (contr A x y p) d where
                     T (z: singl A x): U = C x (z.1) (z.2)


comp1 (A:U)(B:A->U)(a:A)(f:A->B a): Equ (B a) (app A B a (lambda A B a (f a))) (f a) = reflect (B a) (f a) -- beta
comp2 (A:U)(B:A->U)(a:A)(f:A->B a): Equ (A -> B a) f (\(x:A) -> f x)                 = reflect (A -> B a) f -- eta
comp3 (A:U)(B:A->U)(a:A)(b: B a): Equ A a (pr1 A B (a,b))                            = reflect A          a
comp4 (A:U)(B:A->U)(a:A)(b: B a): Equ (B a) b (pr2 A B (a,b))                        = reflect (B a)      b
comp5 (A:U)(B:A->U)(p: Sigma A B): Equ (Sigma A B) p (pr1 A B p,pr2 A B p)           = reflect (Sigma A B) p
comp6 (A:U)(x y:A)(C: D A)(p: Equ A x y)(b: C x x (reflect A x))
       (X: Equ U (C x x (reflect A x)) (C x y p)): PathP X b (J A x C b y p)         = undefined

MLTT (A: U): U
  = (Pi_Former:    (A -> U) -> U)
  * (Pi_Intro:     (B: A -> U) (a: A) -> B a -> (A -> B a))
  * (Pi_Elim:      (B: A -> U) (a: A) -> (A -> B a) -> B a)
  * (Pi_Comp1:     (B: A -> U) (a: A) (f: A -> B a) -> Equ (B a) (Pi_Elim B a (Pi_Intro B a (f a))) (f a))
  * (Pi_Comp2:     (B: A -> U) (a: A) (f: A -> B a) -> Equ (A -> B a) f (\(x:A) -> f x))
  * (Sigma_Former: (A -> U) -> U)
  * (Sigma_Intro:  (B: A -> U) (a: A) -> (b: B a) -> Sigma A B)
  * (Sigma_Elim1:  (B: A -> U) -> (_: Sigma A B) -> A)
  * (Sigma_Elim2:  (B: A -> U) -> (x: Sigma A B) -> B (pr1 A B x))
  * (Sigma_Comp1:  (B: A -> U) (a: A) (b: B a) -> Equ A a (Sigma_Elim1 B (Sigma_Intro B a b)))
  * (Sigma_Comp2:  (B: A -> U) (a: A) (b: B a) -> Equ (B a) b (Sigma_Elim2 B (a,b)))
  * (Sigma_Comp3:  (B: A -> U) (p: Sigma A B)  -> Equ (Sigma A B) p (pr1 A B p,pr2 A B p))
  * (Id_Former:    A -> (A -> U))
  * (Id_Intro:     (a: A) -> Equ A a a)
  * (Id_Elim: (x: A) (C: D A) (d: C x x (Id_Intro x)) (y: A) (p: Equ A x y) -> C x y p)
  * (Id_Comp: (x y:A)(C: D A)(p: Equ A x y)(b: C x x (reflect A x))
              (X: Equ U (C x x (reflect A x)) (C x y p)) ->
              HeteroEqu (C x x (reflect A x)) (C x y p) b (J A x C b y p) X)
  * Unit

instance (A: U): MLTT A
    = (Pi A, lambda A, app A, comp1 A, comp2 A,
       Sigma A, pair A, pr1 A, pr2 A, comp3 A, comp4 A, comp5 A,
       Equ A, reflect A, J A, comp6 A,
       tt)
