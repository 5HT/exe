module monad where

import control

bind_sig (F: U -> U): U =   (A: U) -> F    (F A) -> F A

{-
monad (F: U -> U): U
    = (pure_: (A: U) -> pure A F)
    * (functor_: functor F)
    * (join: (A B: U) -> F (F A) -> F B)
    * Unit

comonad (F: U -> U): U
    = (pure_: (A: U) -> pure A F)
    * (functor_: functor F)
    * (extract: (A: U) -> F A -> A)
    * (duplicate: (A: U) -> F A -> F (F A))
    * (extend: (A B: U) -> (F A -> B) -> F A -> F B)
    * Unit
-}

