module nat where

{- Basic run-time nat module -}

import maybe
import bool

data nat = zero | succ (n : nat)

-- Eq Nat -- type class instance

nat_eq: nat -> nat -> bool = split
  zero -> split@(nat -> bool) with
    zero  -> true
    succ n -> false
  succ m -> split@(nat -> bool) with
    zero  -> false
    succ n -> nat_eq m n

pred : nat -> nat = split
  zero -> zero
  succ n -> n

extract: nat -> maybe nat = split
  zero -> nothing
  succ x -> just x

pred_ : maybe nat -> maybe nat = split
  nothing -> nothing
  just x -> extract x

add (m : nat) : nat -> nat = split
  zero  -> m
  succ n -> succ (add m n)

one   : nat = succ zero
two   : nat = succ one
three : nat = succ two
four  : nat = succ three
five  : nat = succ four

n0  : nat = zero
n1  : nat = succ n0
n2  : nat = succ n1
n3  : nat = succ n2
n4  : nat = succ n3
n5  : nat = succ n4
n6  : nat = succ n5
n7  : nat = succ n6
n8  : nat = succ n7
n9  : nat = succ n8
n10 : nat = succ n9
n11 : nat = succ n10
n12 : nat = succ n11
n13 : nat = succ n12
n14 : nat = succ n13
n15 : nat = succ n14
n16 : nat = succ n15
n17 : nat = succ n16
n18 : nat = succ n17
n19 : nat = succ n18
n20 : nat = succ n19

