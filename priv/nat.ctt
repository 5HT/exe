module nat where

import maybe
import bool

{- Simple run-time nat Datatype -}

data nat = zero | succ (n: nat)

nat_eq: nat -> nat -> bool = split
  zero      -> split@(nat -> bool) with
     zero   -> true
     succ n -> false
  succ m    -> split@(nat -> bool) with
     zero   -> false
     succ n -> nat_eq m n

one   : nat = succ zero
two   : nat = succ one
three : nat = succ two
four  : nat = succ three
five  : nat = succ four

-- Section 1.9 HoTT
rec_nat (A:U) (c_0 : A) (c_s : nat -> A -> A) : (n:nat) -> A = split
  zero  -> c_0
  succ n -> c_s n (rec_nat A c_0 c_s n)

-- Section 1.9 HoTT
ind_nat (A:nat->U) (c_0:A zero) (c_s : (n:nat) -> A n -> A (succ n)) : (n:nat) -> A n = split
  zero  -> c_0
  succ n -> c_s n (ind_nat A c_0 c_s n)

nat_eq: nat -> nat -> bool = split
  zero -> split@(nat -> bool) with { zero -> true; succ n -> false }
  succ m -> split@(nat -> bool) with { zero -> false; succ n -> nat_eq m n }

pred: nat -> nat = split
  zero -> zero
  succ n -> n

add (m: nat): nat -> nat = split { zero -> m; succ n -> succ (add m n) }

mult: nat -> nat -> nat
  = rec_nat (nat->nat) (\(_:nat) -> zero)
            (\(_:nat) (mult_:nat->nat) (m:nat) -> add m (mult_ m))

exponent : nat -> nat -> nat =
  \(x:nat) (power:nat) ->
     (rec_nat (nat->nat) (\(_:nat) -> one)
     (\(_:nat) (exponent_:nat->nat) (m:nat) -> mult m (exponent_ m)))
     power x


n0  : nat = zero
n1  : nat = succ n0
n2  : nat = succ n1
n3  : nat = succ n2
n4  : nat = succ n3
n5  : nat = succ n4
n6  : nat = succ n5
n7  : nat = succ n6
n8  : nat = succ n7
n9  : nat = succ n8
n10 : nat = succ n9
n11 : nat = succ n10
n12 : nat = succ n11
n13 : nat = succ n12
n14 : nat = succ n13
n15 : nat = succ n14
n16 : nat = succ n15
n17 : nat = succ n16
n18 : nat = succ n17
n19 : nat = succ n18
n20 : nat = succ n19

{- Finite Set Datatype -}

extract: nat -> maybe nat = split
  zero -> nothing
  succ x -> just x

pred_ : maybe nat -> maybe nat = split
  nothing -> nothing
  just x -> extract x

data Fin (n: maybe nat) = fzero | fsucc (_: Fin (pred_ n))

x11: Fin (just zero) = fzero

-- x12:  Fin (just zero) = fsucc x11
-- Fin (just zero)
-- /=
-- Fin nothing

x21: Fin (just one) = fzero
x22: Fin (just one) = fsucc x11

-- x23: Fin (just one) = fsucc (fsucc x11)
-- Fin (just zero)
-- /=
-- Fin nothing

