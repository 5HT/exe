module path where

import proto_path

substP (A B: U) (P : (X: U) -> X -> U) (PP: Path U A B) (a: A) (b : B) (p : PathP PP a b) (e : P A a) : P B b
    = comp (<i> P (PP @ i) (p @ i)) e []

compositeP (A B C: U) (a: A) (b: B) (c: C) (pab: Path U A B) (pbc: Path U B C) (p: PathP pab a b) (q: PathP pbc b c): (pac: Path U A C) * PathP pac a c
  = substP B C P pbc b c q (pab, p) where
  P (X: U) (x: X): U = (pax: Path U A X) * PathP pax a x

-- if there's a path from a type then there is a path from every element
elemPathP (A B: U) (p: Path U A B) (a: A): (p': Path U A B) * (b: B) * PathP p' a b
  = comp (<i> P (p @ i)) (refl U A, a, refl A a) [] where
  P (X: U): U = (p: Path U A X) * (x: X) * PathP p a x

piExt  (A: U) (B: A -> U)
       (f g: (x : A) -> B x)
       (p : (x : A) -> Path (B x) (f x) (g x)) :
       Path ((y : A) -> B y) f g = <i> \(a : A) -> (p a) @ i

funExt (A B: U) (f g: A -> B)
       (p: (x : A) -> Path B (f x) (g x)):
       Path (A -> B) f g = <i> \(a : A) -> p a @ i

funExtInv (A B: U) (f g: A -> B) (p : Path (A -> B) f g) (x: A): Path B (f x) (g x)
  = mapOnPath (A -> B) B ff f g p where
  ff (f: A -> B): B = f x
