{- Equivalence Type:
   - Fibers;
   - Contractability of Fibers and Singletons;
   - Equivalence.
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module proto_equiv where
import path
import prop

fiber (A B: U) (f: A -> B) (y: B): U = (x: A) * Path B y (f x)
isSingleton (X:U): U = (c:X) * ((x:X) -> Path X c x)
isEquiv (A B: U) (f: A -> B): U = (y: B) -> isContr (fiber A B f y)
equiv (A B: U): U = (f: A -> B) * isEquiv A B f

-- slow
propIsEquiv (A B: U) (f: A -> B): isProp (isEquiv A B f)
  = \(u0 u1: isEquiv A B f) -> <i> \(y:B) -> propIsContr (fiber A B f y) (u0 y) (u1 y) @ i

-- fast
propIsEquivDirect (A B: U) (f: A -> B): isProp (isEquiv A B f)
  = \(p q: isEquiv A B f) -> <i> \(y: B) ->
    let p0: A = (p y).1.1
        p1: Path B y (f p0) = (p y).1.2
        p2: (w1 : fiber A B f y) -> Path (fiber A B f y) (p0,p1) w1 = (p y).2
        q0: A = (q y).1.1
        q1: Path B y (f q0) = (q y).1.2
        q2: (w1 : fiber A B f y) -> Path (fiber A B f y) (q0,q1) w1 = (q y).2
        sq (w: fiber A B f y): PathP (<j> Path (fiber A B f y) (p2 (q0,q1) @ j) w) (p2 w) (q2 w)
           = <i j> comp (<_> fiber A B f y) (p2 w @ i \/ j)
                      [ (i = 0) -> <k> p2 w @ j,
                        (i = 1) -> <k> q2 w @ j \/ -k,
                        (j = 0) -> <k> p2 (q2 w @ -k) @ i,
                        (j = 1) -> <k> w ]
     in (p2 (q0,q1) @ i, \(w : fiber A B f y) -> sq w @ i)

propIsEquivDirect (A B: U) (f: A -> B): isProp (isEquiv A B f) =
 \ (p q: isEquiv A B f) -> <i>
 \ (y: B) -> ((p2 p y) (q0 q y,q1 q y) @ i,\ (w: fiber A B f y) -> sq p q y w @ i) where
   p0(p: isEquiv A B f)(y:B): A = (p y).1.1
   p1(p: isEquiv A B f)(y:B): Path B y (f (p0 p y)) = (p y).1.2
   p2(p: isEquiv A B f)(y:B): (w1: fiber A B f y) -> Path (fiber A B f y) (p0 p y,p1 p y) w1 = (p y).2
   q0(q: isEquiv A B f)(y:B): A = (q y).1.1
   q1(q: isEquiv A B f)(y:B): Path B y (f (q0 q y)) = (q y).1.2
   q2(q: isEquiv A B f)(y:B): (w1: fiber A B f y) -> Path (fiber A B f y) (q0 q y,q1 q y) w1 = (q y).2
   sq(p q: isEquiv A B f)(y:B)(w:fiber A B f y): PathP (<j> Path (fiber A B f y) ((p2 p y) (q0 q y,q1 q y) @ j) w) ((p2 p y) w) ((q2 q y) w) =
       <i j> comp (<_> fiber A B f y) ((p2 p y) w @ i \/ j)
                 [(i = 0) -> <k> (p2 p y) w @ j,
                  (i = 1) -> <k> (q2 q y) w @ j \/ -k,
                  (j = 0) -> <k> (p2 p y) ((q2 q y) w @ -k) @ i,
                  (j = 1) -> <k> w ]

idIsEquiv (A: U): isEquiv A A (idfun A)
  = \(a: A) -> ((a, refl A a),\(z: fiber A A (idfun A) a) -> contr A a z.1 z.2)

idEquiv (A:U): equiv A A = (\ (x:A) -> x, isContrSingl A)

transEquiv  (A B: U) (p: Path U A B): equiv A B = subst U (equiv A) A B p (idEquiv A)
transEquiv' (A B: U) (p: Path U B A): equiv B A = subst U (\(Y: U) -> equiv Y A) A B (<i> p @ -i) (idEquiv A)

