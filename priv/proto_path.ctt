{- Path Type:
   - Reflexivity, Symmetry, Composition, Kan;
   - Congruence and Respect;
   - Contractability of Singletons;
   - Substitution, Transport, J.
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module proto_path where

-- Path type and its eliminators
Path     (A: U) (a b: A): U = PathP (<i> A) a b
HPath  (A B: U) (a: A) (b: B) (P: Path U A B) : U = PathP P a b

refl     (A: U) (a: A): Path A a a = <i> a
singl    (A: U) (a: A): U = (x: A) * Path A a x
eta      (A: U) (a: A): singl A a = (a,refl A a)

contr    (A: U) (a b: A) (p: Path A a b): Path (singl A a) (eta A a) (b,p) = <i> (p @ i,<j> p @ i/\j)
sym      (A: U) (a b: A) (p: Path A a b): Path A b a = <i> p @ -i
inv      (A: U) (a b: A) (p: Path A a b): Path A b a = <i> p @ -i
cong   (A B: U) (f: A->B) (a b: A) (p: Path A a b): Path B (f a) (f b) = <i> f (p @ i)
ap       (A: U) (a x:A) (B:A->U) (f: A->B a) (b: B a) (p: Path A a x): Path (B a) (f a) (f x) = <i> f (p @ i)
trans  (A B: U) (p: Path U A B) (a : A): B = comp p a []
subst    (A: U) (P: A->U) (a b: A) (p: Path A a b) (e: P a): P b = comp (<i> P (p @ i)) e []
coerce (A B: U) (p: Path U A B): A -> B = \ (x: A) -> trans A B p x

-- Path induction from HoTT
J   (A: U) (a: A)
    (C: (x : A) -> Path A a x -> U)
    (d: C a (refl A a)) (x: A) (p: Path A a x): C x p
--  = comp  (<i> C (p @ i) (<j> p @ i /\ j)) d [] -- normal form
    = subst (singl A a) T (eta A a) (x, p) (contr A a x p) d
           where T (z : singl A a) : U = C (z.1) (z.2)

-- Computational Rules
trans_comp (A : U) (a : A) : Path A a (trans A A (<_> A) a) = fill (<_> A) a []
subst_comp (A : U) (P : A -> U) (a : A) (e : P a): Path (P a) e (subst A P a a (refl A a) e) = trans_comp (P a) e
J_comp     (A : U) (a : A) (C : (x : A) -> Path A a x -> U)
        (d : C a (refl A a)) : Path (C a (refl A a)) d (J A a C d a (refl A a))
      = subst_comp (singl A a) T (a, refl A a) d where
        T (z : singl A a) : U = C (z.1) (z.2)

symJ (A: U) (a b: A) (p: Path A a b): Path A b a
  = J A a T (refl A a) b p where T (x: A) (_: Path A a x): U = Path A x a

transJ (A: U) (a b c: A) (p: Path A a b) (q: Path A b c): Path A a c
  = undefined

composeUniv (A B C: U) (p: Path U A B) (q: Path U B C): Path U A C
    = comp (<i> Path U A (q @ i)) p []

-- composition operation
composition (A: U) (a b c: A) (p: Path A a b) (q: Path A b c): Path A a c
    = comp (<i> Path A a (q @ i)) p []
--  = subst A (Path A a) b c q p
--  = <i> comp (<j>A) (p @ i) [(i=0) -> <j> a, (i=1) -> q ]

-- Kan filling operation
kan (A: U) (a b c d: A) (p: Path A a b) (q: Path A a c) (r: Path A b d): Path A c d
    = <i> comp (<j>A) (p @ i) [(i=0) -> q, (i=1) -> r ]
