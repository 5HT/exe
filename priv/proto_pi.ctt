module proto_pi where

import iso

Pi (A:U) (P:A->U) : U = (x:A) -> P x

-- idPi: Equality in pi types, a bidirectional version of path.funExt
idPi (A:U) (B:A->U) (f g : Pi A B) : Path U (Path (Pi A B) f g) ((x:A) -> Path (B x) (f x) (g x))
  = isoPath  (Path (Pi A B) f g) ((x:A) -> Path (B x) (f x) (g x)) F G S T where
  T0 : U = Path (Pi A B) f g
  T1 : U = (x:A) -> Path (B x) (f x) (g x)
  F (p:T0) : T1 = \ (x:A) -> <i>p@i x
  G (p:T1) : T0 = <i>\ (x:A) -> p x @ i
  S (p:T1) : Path T1 (F (G p)) p = refl T1 p
  T (p:T0) : Path T0 (G (F p)) p = refl T0 p

setPi (A:U) (B:A -> U) (h:(x:A) -> isSet (B x)) (f g: Pi A B)
  : isProp (Path (Pi A B) f g)
  = subst U isProp T (Path (Pi A B) f g) (<i>idPi A B f g@-i) rem1 where
  T : U = (x:A) -> Path (B x) (f x) (g x)
  rem1 : isProp T = \ (p q : T) -> <i> \ (x:A) -> h x (f x) (g x) (p x) (q x)@i

-- setPi - Sets are closed under pi-abstraction
-- Note that `A` is any type and not merely a set
-- Proof plan:
-- We expand `isSet` so we see it's underlying equality on paths.
-- Then we apply `propPi` to `h` to prove `isProp a` - an eta-expanded version
-- of the goal. Then we use pi-extensionality path between a and b to convert
-- isProp a to isProp b
setPi (A : U) (B : A -> U) (h : (x : A) -> isSet (B x)): isSet ((x: A) -> B x)
  = goal h where
  goal (h : (x : A)
    (g0 g1 :            B x) -> isProp (Path (           B x) g0 g1))
    (f  g  : (x : A) -> B x) :  isProp (Path ((x : A) -> B x) f g)
    = subst U isProp a b p e where
    a : U = (x: A) -> Path (B x) (f x) (g x)
    b : U = Path ((x : A) -> B x) f g
    p : Path U a b = <i> idPi A B f g @ -i
    e : isProp a = propPi A P (\(x: A) -> h x (f x) (g x)) where
      P (x: A): U = Path (B x) (f x) (g x)

setFun (X Y: U) (proofY: isSet Y)
  : isSet (X -> Y)
  = setPi X (\(_: X) -> Y) (\(_: X) -> proofY)
