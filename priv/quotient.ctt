-- Experimental implementation of quotient HIT (not finished)
module quotient where

import circle

-- Quotient A by R
data Quot (A : U) (R : A -> A -> U) =
    inj (a : A)
  | quoteq (a b : A) (r : R a b)
           <i> [ (i = 0) -> inj a, (i = 1) -> inj b ]

quoteq' (A : U) (R : A -> A -> U) (a b : A) (r : R a b)
  : Path (Quot A R) (inj a) (inj b) = <i> quoteq {Quot A R} a b r @ i


-- Test to define circle as a quotient of unit
RS1 (a b : Unit) : U = Unit
s1quot : U = Quot Unit RS1

f1 : s1quot -> S1 = split
  inj _ -> base
  quoteq a b r @ i -> loop1 @ i

f2 : S1 -> s1quot = split
  base -> inj tt
  loop @ i -> quoteq{s1quot} tt tt tt @ i

rem3 : (a : Unit) -> Path s1quot (inj tt) (inj a) = split
   tt -> <i> inj tt

--test : Path U s1quot S1 =
  --isoPath s1quot S1 f1 f2 rem1 rem2
    --where
    --rem1 : (y : S1) -> Path S1 (f1 (f2 y)) y = split
    --  base -> <i> base
    --  loop @ i -> <j> loop1 @ i
    --rem2 : (x : s1quot) -> Path s1quot (f2 (f1 x)) x = split
    --  inj a -> rem3 a
    --  quoteq a b r @ i -> ?


-- Set quotient of A by R
data setquot (A : U) (R : A -> A -> U) =
    quot (a : A)
  | identification (a b : A) (r : R a b) <i> [ (i = 0) -> quot a, (i = 1) -> quot b ]
  | setTruncation (a b : setquot A R) (p q : Path (setquot A R) a b) <i j>
       [ (i = 0) -> p @ j
       , (i = 1) -> q @ j
       , (j = 0) -> a
       , (j = 1) -> b ]


{-
     b
  p    q
     a
-}

identsetquot (A : U) (R : A -> A -> U) (a b : A) (r : R a b)
  : Path (setquot A R) (quot a) (quot b) = <i> identification {setquot A R} a b r @ i

setsetquot (A : U) (R : A -> A -> U) : set (setquot A R) =
   \(a b : setquot A R) (p q : Path (setquot A R) a b) ->
     <i j> setTruncation {setquot A R} a b p q @ i @ j
