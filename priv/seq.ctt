{- Type Sequences
   - Chain Complex;
   - Fiber Sequence;
   - Pointed Map Sequence;
   - Group Sequence;
   - Abelian Group Sequence.
   Copyrigh (c) Groupoid Infinity, 2014-2018. -}

module seq where
import algebra
import pointed
import nat

data Seq (A: U) (B: A -> A -> U) (X Y: A)
   = seqNil (_: A)
   | seqCons (X Y Z: A) (_: B X Y) (_: Seq A B Y Z)

-- Pointed Map Sequence
pmSeq: pointed -> pointed -> U = Seq pointed pmap
pmNil (X: pointed): pmSeq X X = seqNil X
pmCons (X Y Z: pointed) (h: pmap X Y) (t: pmSeq Y Z): pmSeq X Z = seqCons X Y Z h t

-- Group Homomorphism Sequence
homSeq: group -> group -> U = Seq group grouphom
homNil (X: group): homSeq X X = seqNil X
homCons (X Y Z: group) (h: grouphom X Y) (t: homSeq Y Z): homSeq X Z = seqCons X Y Z h t

-- Abelian Group Homomorphism Sequence
abSeq: abgroup -> abgroup -> U = Seq abgroup abgrouphom
abNil (X: abgroup): abSeq X X = seqNil X
abCons (X Y Z: abgroup) (h: abgrouphom X Y) (t: abSeq Y Z): abSeq X Z = seqCons X Y Z h t

ChainComplex: U
  = (head: abgroup)
  * (chain: nat -> abgroup)
  * (augment: abgrouphom (chain zero) head)
  * ((n: nat) -> abgrouphom (chain (succ n)) (chain n))

CochainComplex: U
  = (head: abgroup)
  * (cochain: nat -> abgroup)
  * (augment: abgrouphom head (cochain zero))
  * ((n: nat) -> abgrouphom (cochain n) (cochain (succ n)))

opaque Seq
