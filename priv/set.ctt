{- Set Theory:
   - Injectivity;
   Copyright (c) Groupoid Infinity, 2014-2018.

   see HoTT 3.1 Sets and n-types -}

module set where
import proto
import path
import prop
import pi
import sigma
import equiv

-- Contractible is a Prop

corSigProp (A:U) (B:A-> U) (pB : (x:A) -> isProp (B x)) (t u : Sigma A B) (p:Path A t.1 u.1) :
  isProp (PathP (<i>B (p@i)) t.2 u.2) = substInv U isProp T0 T1 rem rem1
 where P : Path U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = PathP P t.2 u.2
       T1 : U = Path (B u.1) (transport P t.2) u.2
       rem : Path U T0 T1 = pathSig0 A B t u p
       v2 : B u.1 = transport P t.2
       rem1 : isProp T1 = propSet (B u.1) (pB u.1) v2 u.2

setIsProp (A : U) : isProp (isSet A) =
 \(f g : isSet A) -> <i> \(a b :A) ->
   propIsProp (Path A a b) (f a b) (g a b) @ i

setUnit : isSet unit = propSet unit propUnit

inj (A B : U) (f : A -> B) (sA : isSet A) (sB : isSet B) : U
  = (b : B) -> isProp ((a : A) * Path B (f a) b)

prop_inj (A B: U) (f: A -> B) (sA: isSet A) (sB: isSet B): isProp (inj A B f sA sB)
  = propPi B Q h where
    P: B -> U = \(b: B) -> (a: A) * Path B (f a) b
    Q: B -> U = \(b: B) -> isProp (P b)
    h: (b: B) -> isProp (Q b) = \(b: B) -> propIsProp (P b)
