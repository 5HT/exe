module sigma where

import prelude
import iso
import proto_sigma

-- unused
lemTransp (A:U) (a:A) : Path A a (transport (<_>A) a) = fill (<_>A) a []

-- unused (transitively)
corSigGroupoid (A:U) (B:A-> U) (gB : (x:A) -> groupoid (B x)) (t u : Sigma A B) (p:Path A t.1 u.1) :
  set (PathP (<i>B (p@i)) t.2 u.2) = substInv U set T0 T1 rem rem1
 where P : Path U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = PathP P t.2 u.2
       T1 : U = Path (B u.1) (transport P t.2) u.2
       rem : Path U T0 T1 = pathSig0 A B t u p -- funDepTr (B t.1) (B u.1) P t.2 u.2
       v2 : B u.1 = transport P t.2
       rem1 : set T1 = gB u.1 v2 u.2

-- unused
groupoidSig (A:U) (B:A-> U) (gA: groupoid A) (gB : (x:A) -> groupoid (B x)) (t u : Sigma A B) : set (Path (Sigma A B) t u) =
  substInv U set (Path (Sigma A B) t u) ((p:T) * C p) rem3 rem2
 where
   T : U = Path A t.1 u.1
   C (p:T) : U = PathP (<i> B (p@i)) t.2 u.2
   rem (p : T) : set (C p) = corSigGroupoid A B gB t u p
   rem1 : set T = gA t.1 u.1
   rem2 : set ((p:T) * C p) = setSig T C rem1 rem
   rem3 : Path U (Path (Sigma A B) t u) ((p:T) * C p) = pathSig A B t u

lemContr (A:U) (pA:prop A) (a:A) : isContr A = (a,rem)
 where rem (y:A) : Path A a y = pA a y

lem3 (A:U) (B:A-> U) (pB : (x:A) -> prop (B x)) (t u : Sigma A B) (p:Path A t.1 u.1) :
  isContr (PathP (<i>B (p@i)) t.2 u.2) = lemContr T0 (substInv U prop T0 T1 rem rem1) rem2
 where P : Path U (B t.1) (B u.1) = <i>B (p@i)
       T0 : U = PathP P t.2 u.2
       T1 : U = Path (B u.1) (transport P t.2) u.2
       rem : Path U T0 T1 = pathSig0 A B t u p
       v2 : B u.1 = transport P t.2
       rem1 : prop T1 = propSet (B u.1) (pB u.1) v2 u.2
       rem2 : T0 = transport (<i>rem@-i) (pB u.1 v2 u.2)

lem6 (A:U) (P:A-> U) (cA:(x:A) -> isContr (P x)) : Path U ((x:A)*P x) A = isoPath T A f g t s
 where
   T : U = (x:A) * P x
   f (z:T) : A = z.1
   g (x:A) : T = (x,(cA x).1)
   s (z:T) : Path T (g (f z)) z = <i>(z.1,((cA z.1).2 z.2)@ i)
   t (x:A) : Path A (f (g x)) x = refl A x

-- used in setquot
lemSigProp (A:U) (B:A-> U) (pB : (x:A) -> prop (B x)) (t u : Sigma A B) : Path U (Path (Sigma A B) t u) (Path A t.1 u.1) =
 compPath U (Path (Sigma A B) t u) ((p:Path A t.1 u.1) * PathP (<i> B (p@i)) t.2 u.2) (Path A t.1 u.1) rem2 rem1
 where
   T : U = Path A t.1 u.1
   C (p:T) : U = PathP (<i> B (p@i)) t.2 u.2
   rem (p : T) : isContr (C p) = lem3 A B pB t u p
   rem1 : Path U ((p:T) * C p) T = lem6 T C rem
   rem2 : Path U (Path (Sigma A B) t u) ((p:T) * C p) = pathSig A B t u

-- unused
setGroupoid (A:U) (sA:set A) (a0 a1:A) : set (Path A a0 a1) = propSet (Path A a0 a1) (sA a0 a1)

-- unused
propGroupoid (A:U) (pA: prop A) : groupoid A = setGroupoid A (propSet A pA)
