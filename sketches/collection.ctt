{- Set Theory:
   - Collection of all sets is a groupoid.
   - Path space between sets is a set.
   Copyright (c) Groupoid Infinity, 2014-2018. -}

module collection where
import equiv
import univ
import prop
import sigma
import pi
import iso_sigma
import iso_pi

eqEquivFst (A B : U) : (t u : equiv A B) ->
     Path U (Path (equiv A B) t u) (Path (A -> B) t.1 u.1)
   = lemSigProp (A -> B) (isEquiv A B) (propIsEquiv A B)

setPath (A B : U) (sB : isSet B) : isSet (Path U A B) =
 substInv U isSet (Path U A B) (equiv A B) (corrUniv A B) (rem A B sB)
  where
  rem (A B : U) (sB:isSet B) (t u:equiv A B) : isProp (Path (equiv A B) t u)
    = substInv U isProp (Path (equiv A B) t u) (Path (A -> B) t.1 u.1)
            (eqEquivFst A B t u) (setFun A B sB t.1 u.1)

groupoidSET : isGroupoid SET = \(A B : SET) ->
  let rem : isSet (Path U A.1 B.1) = setPath A.1 B.1 B.2
      rem1 : Path U (Path SET A B) (Path U A.1 B.1) =
        lemSigProp U isSet setIsProp A B
  in substInv U isSet (Path SET A B) (Path U A.1 B.1) rem1 rem

